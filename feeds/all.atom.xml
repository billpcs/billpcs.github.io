<?xml version="1.0" encoding="utf-8"?> 
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
 <title type="text">The Random Blog: The Random Blog</title>
 <link rel="self" href="http://billpcs.github.io/feeds/all.atom.xml" />
 <link href="http://billpcs.github.io/index.html" />
 <id>urn:http-billpcs-github-io:-index-html</id>
 <updated>2019-05-16T17:17:15Z</updated>
 <entry>
  <title type="text">An intro to DPDK for mortals</title>
  <link rel="alternate" href="http://billpcs.github.io/2019/05/an-intro-to-dpdk-for-mortals.html?utm_source=all&amp;utm_medium=Atom" />
  <id>urn:http-billpcs-github-io:-2019-05-an-intro-to-dpdk-for-mortals-html</id>
  <published>2019-05-16T17:17:15Z</published>
  <updated>2019-05-16T17:17:15Z</updated>
  <author>
   <name>bill</name></author>
  <content type="html">
&lt;p&gt;&lt;em&gt;DPDK can be a bit intimidating even if this is not your first time writing C network code. In this (rather long) post, I aim to offer a step by step introduction to DPDK; from understanding its usefulness, to setting up the environment and up to finally writing a small program that uses the library. Take your time with the links, the steps and the commands; don&amp;rsquo;t overwhelm yourself. See you on the other side!&lt;/em&gt;&lt;/p&gt;&lt;a href="http://billpcs.github.io/2019/05/an-intro-to-dpdk-for-mortals.html?utm_source=all&amp;amp;utm_medium=Atom"&gt;&lt;em&gt;More&amp;hellip;&lt;/em&gt;&lt;/a&gt;</content></entry>
 <entry>
  <title type="text">SDES in Scala</title>
  <link rel="alternate" href="http://billpcs.github.io/2018/03/sdes-in-scala.html?utm_source=all&amp;utm_medium=Atom" />
  <id>urn:http-billpcs-github-io:-2018-03-sdes-in-scala-html</id>
  <published>2018-03-25T13:22:29Z</published>
  <updated>2018-03-25T13:22:29Z</updated>
  <author>
   <name>bill</name></author>
  <content type="html">
&lt;h1 id="implementing-simplified-data-encryption-standard-in-scala"&gt;Implementing Simplified Data Encryption Standard in Scala&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;(I intended for this blog post to be a full explanation of my SDES implementation, but it got too long too fast. Therefore, in this post I focused mostly on the binary number representation and didn&amp;rsquo;t analyze other topics such as the test suite and the class hierarchies, topics that I will maybe address in a future post &amp;mdash;probably never)&lt;/em&gt;&lt;/p&gt;

&lt;h3 id="intro"&gt;Intro&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Data_Encryption_Standard"&gt;DES&lt;/a&gt; is a symmetric algorithm for encrypting data. Simplified DES or SDES, as I will refer to it from now on, is a simple version of DES, which is used to familiarize the students with the inner workings of the algorithm without getting too involved with details. I happened to implement it for a semester course project and below are some of my thoughts.&lt;/p&gt;&lt;a href="http://billpcs.github.io/2018/03/sdes-in-scala.html?utm_source=all&amp;amp;utm_medium=Atom"&gt;&lt;em&gt;More&amp;hellip;&lt;/em&gt;&lt;/a&gt;</content></entry>
 <entry>
  <title type="text">The Power Of Abstraction</title>
  <link rel="alternate" href="http://billpcs.github.io/2017/05/the-power-of-abstraction.html?utm_source=all&amp;utm_medium=Atom" />
  <id>urn:http-billpcs-github-io:-2017-05-the-power-of-abstraction-html</id>
  <published>2017-05-20T18:34:27Z</published>
  <updated>2017-05-20T18:34:27Z</updated>
  <author>
   <name>bill</name></author>
  <content type="html">
&lt;h3 id="a-simple-demonstration"&gt;A simple demonstration&lt;/h3&gt;

&lt;p&gt;You are outside a restaurant. You get in and sit at a table. The waiter brings you the menu and you choose a steak. You tell the waiter about your decision and after some time (hopefully not too much) the waiter brings a steak to your table. You eat the steak and leave.&lt;/p&gt;&lt;a href="http://billpcs.github.io/2017/05/the-power-of-abstraction.html?utm_source=all&amp;amp;utm_medium=Atom"&gt;&lt;em&gt;More&amp;hellip;&lt;/em&gt;&lt;/a&gt;</content></entry>
 <entry>
  <title type="text">The first blog post</title>
  <link rel="alternate" href="http://billpcs.github.io/2016/12/the-first-blog-post.html?utm_source=all&amp;utm_medium=Atom" />
  <id>urn:http-billpcs-github-io:-2016-12-the-first-blog-post-html</id>
  <published>2016-12-16T15:07:17Z</published>
  <updated>2016-12-16T15:07:17Z</updated>
  <author>
   <name>bill</name></author>
  <content type="html">
&lt;h3 id="undestanding--by-doing-something-else"&gt;Undestanding &lt;a href="https://github.com/greghendershott/frog"&gt;&lt;strong&gt;&lt;em&gt;frog&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt; (by doing something else)&lt;/h3&gt;

&lt;p&gt;I will try to write a function to convert a bit-stream (in the form of a string) to its representation as an &lt;a href="https://en.wikipedia.org/wiki/IP_address#IPv4_addresses"&gt;IPv4&lt;/a&gt; address.&lt;/p&gt;

&lt;p&gt;The catch is, the code must be as concise as possible.&lt;/p&gt;&lt;a href="http://billpcs.github.io/2016/12/the-first-blog-post.html?utm_source=all&amp;amp;utm_medium=Atom"&gt;&lt;em&gt;More&amp;hellip;&lt;/em&gt;&lt;/a&gt;</content></entry></feed>
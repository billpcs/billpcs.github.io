((3) 0 () 0 () () (h ! (equal) ((p+ #"/home/bill/Desktop/billpcs.github.io/_src/posts/2016-12-16-test-blog-post.md" . unix) f post (u . "The first blog post") (p+ #"/home/bill/Desktop/billpcs.github.io/_src/posts/2016-12-16-test-blog-post.md" . unix) 1481993525 (p+ #"/home/bill/Desktop/billpcs.github.io/blog/2016/12/16/the-first-blog-post/index.html" . unix) "/blog/2016/12/16/the-first-blog-post/" (u . "2016-12-16T17:07:17") #f #f (c (u . "programming") c (u . "scala") c (u . "python") c (u . "ipv4")) (u . "\n<h2 id=\"undestanding--by-doing-something-else\">Undestanding <a href=\"https://github.com/greghendershott/frog\"><strong><em>frog</em></strong></a> (by doing something else)</h2>\n\n<p>I will try to write a function to convert a bit-stream (in the form of a string) to its representation as an <a href=\"https://en.wikipedia.org/wiki/IP_address#IPv4_addresses\">IPv4</a> address.</p>\n\n<p>The catch is, the code must be as concise as possible.</p>\n\n<p><strong><em>Let&rsquo;s try Scala!</em></strong></p>\n\n<p>Scala can be very concise and yet readable with some nicely written chains of operations. Let&rsquo;s see it in action here:</p>\n\n<div class=\"brush: scala\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1\n2\n3\n4</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span>  <span class=\"k\">def</span> <span class=\"n\">toIp</span><span class=\"o\">(</span><span class=\"n\">str</span><span class=\"k\">:</span> <span class=\"kt\">String</span><span class=\"o\">)</span> <span class=\"k\">=</span>\n     <span class=\"n\">str</span><span class=\"o\">.</span><span class=\"n\">grouped</span><span class=\"o\">(</span><span class=\"mi\">8</span><span class=\"o\">)</span>\n        <span class=\"o\">.</span><span class=\"n\">map</span><span class=\"o\">(</span><span class=\"n\">el</span> <span class=\"k\">=&gt;</span> <span class=\"nc\">Integer</span><span class=\"o\">.</span><span class=\"n\">parseInt</span><span class=\"o\">(</span><span class=\"n\">el</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">))</span>\n        <span class=\"o\">.</span><span class=\"n\">mkString</span><span class=\"o\">(</span><span class=\"s\">\".\"</span><span class=\"o\">)</span>   \n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>The <code>grouped(n)</code> method is defined for all the members of <code>scala.collection.IterableLike</code> which <code>String</code> is a member of. But let&rsquo;s not get too involved.</p>\n\n<p>What it does is given <strong>&ldquo;123456&rdquo;</strong> return an iterator with the contents grouped every <strong><em>nth</em></strong> character, i.e if n is 2 then we get <code>(\"12\", \"34\", \"56\")</code> which is perfect for this job.</p>\n\n<p>All we have to to then, is map each one to its decimal representation and be done with it.</p>\n\n<p>Now we can just do</p>\n\n<div class=\"brush: scala\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1\n2</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span>  <span class=\"k\">@</span> <span class=\"n\">toIp</span><span class=\"o\">(</span><span class=\"s\">\"10000000000010100000001000011110\"</span><span class=\"o\">)</span>\n  <span class=\"n\">res1</span><span class=\"k\">:</span> <span class=\"kt\">String</span> <span class=\"o\">=</span> <span class=\"s\">\"128.10.2.30\"</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>") #t (u . "\n<h2 id=\"undestanding--by-doing-something-else\">Undestanding <a href=\"https://github.com/greghendershott/frog\"><strong><em>frog</em></strong></a> (by doing something else)</h2>\n\n<p>I will try to write a function to convert a bit-stream (in the form of a string) to its representation as an <a href=\"https://en.wikipedia.org/wiki/IP_address#IPv4_addresses\">IPv4</a> address.</p>\n\n<p>The catch is, the code must be as concise as possible.</p>\n\n<p><strong><em>Let&rsquo;s try Scala!</em></strong></p>\n\n<p>Scala can be very concise and yet readable with some nicely written chains of operations. Let&rsquo;s see it in action here:</p>\n\n<div class=\"brush: scala\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1\n2\n3\n4</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span>  <span class=\"k\">def</span> <span class=\"n\">toIp</span><span class=\"o\">(</span><span class=\"n\">str</span><span class=\"k\">:</span> <span class=\"kt\">String</span><span class=\"o\">)</span> <span class=\"k\">=</span>\n     <span class=\"n\">str</span><span class=\"o\">.</span><span class=\"n\">grouped</span><span class=\"o\">(</span><span class=\"mi\">8</span><span class=\"o\">)</span>\n        <span class=\"o\">.</span><span class=\"n\">map</span><span class=\"o\">(</span><span class=\"n\">el</span> <span class=\"k\">=&gt;</span> <span class=\"nc\">Integer</span><span class=\"o\">.</span><span class=\"n\">parseInt</span><span class=\"o\">(</span><span class=\"n\">el</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">))</span>\n        <span class=\"o\">.</span><span class=\"n\">mkString</span><span class=\"o\">(</span><span class=\"s\">\".\"</span><span class=\"o\">)</span>   \n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>The <code>grouped(n)</code> method is defined for all the members of <code>scala.collection.IterableLike</code> which <code>String</code> is a member of. But let&rsquo;s not get too involved.</p>\n\n<p>What it does is given <strong>&ldquo;123456&rdquo;</strong> return an iterator with the contents grouped every <strong><em>nth</em></strong> character, i.e if n is 2 then we get <code>(\"12\", \"34\", \"56\")</code> which is perfect for this job.</p>\n\n<p>All we have to to then, is map each one to its decimal representation and be done with it.</p>\n\n<p>Now we can just do</p>\n\n<div class=\"brush: scala\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1\n2</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span>  <span class=\"k\">@</span> <span class=\"n\">toIp</span><span class=\"o\">(</span><span class=\"s\">\"10000000000010100000001000011110\"</span><span class=\"o\">)</span>\n  <span class=\"n\">res1</span><span class=\"k\">:</span> <span class=\"kt\">String</span> <span class=\"o\">=</span> <span class=\"s\">\"128.10.2.30\"</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n<!-- more-->\n\n<p><strong><em>Let&rsquo;s try Python!</em></strong></p>\n\n<p>The best way I could come up with, without making and import, is this</p>\n\n<div class=\"brush: python\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1\n2\n3\n4</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span>  <span class=\"k\">def</span> <span class=\"nf\">to_ip</span><span class=\"p\">(</span><span class=\"n\">bitstr</span><span class=\"p\">):</span>\n    <span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">bitstr</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">:</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">8</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">bitstr</span><span class=\"p\">),</span> <span class=\"mi\">8</span><span class=\"p\">)]</span>\n    <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">lst</span><span class=\"p\">]</span>\n    <span class=\"k\">return</span> <span class=\"s1\">&#39;.&#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">)</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>and then you can simply call</p>\n\n<div class=\"brush: python\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1\n2</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span>  <span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">to_ip</span><span class=\"p\">(</span><span class=\"s2\">\"10000000000010100000001000011110\"</span><span class=\"p\">))</span>\n  <span class=\"mf\">128.10</span><span class=\"o\">.</span><span class=\"mf\">2.30</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>But one would argue that python is no good without the imports. And I agree, so let&rsquo;s try the same thing, but now with the help of an import.</p>\n\n<div class=\"brush: python\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1\n2\n3</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span>  <span class=\"kn\">import</span> <span class=\"nn\">re</span>\n  <span class=\"k\">def</span> <span class=\"nf\">to_ip2</span><span class=\"p\">(</span><span class=\"n\">bitstr</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"s1\">&#39;.&#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">([</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">findall</span><span class=\"p\">(</span><span class=\"s1\">&#39;........?&#39;</span><span class=\"p\">,</span> <span class=\"n\">bitstr</span><span class=\"p\">)])</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>so now we can call it again and get the expected results</p>\n\n<div class=\"brush: python\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1\n2</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span>  <span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">to_ip2</span><span class=\"p\">(</span><span class=\"s2\">\"10000000000010100000001000011110\"</span><span class=\"p\">))</span>\n  <span class=\"mf\">128.10</span><span class=\"o\">.</span><span class=\"mf\">2.30</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>This is quite concise but it becomes difficult to read.</p>\n\n<p>The classic readability/conciseness problem.</p>\n\n<p>I would argue that it is much clearer in Scala, without giving way to less conciseness.</p>"))))
((3) 0 () 4 ((p+ #"/home/bill/Dropbox/CurrentlyWorkedOn/billpcs.github.io/_src/posts/2019-04-15-an-intro-to-dpdk-for-mortals.md" . unix) (p+ #"/home/bill/Dropbox/CurrentlyWorkedOn/billpcs.github.io/_src/posts/2018-03-25-sdes-in-scala.md" . unix) (p+ #"/home/bill/Dropbox/CurrentlyWorkedOn/billpcs.github.io/_src/posts/2016-12-16-test-blog-post.md" . unix) (p+ #"/home/bill/Dropbox/CurrentlyWorkedOn/billpcs.github.io/_src/posts/2017-05-20-abstraction-through-an-example.md" . unix)) () (h ! (equal) ((? . 0) f post (u . "An intro to DPDK for mortals") (? . 0) 1558024790 (p+ #"/home/bill/Dropbox/CurrentlyWorkedOn/billpcs.github.io/2019/05/an-intro-to-dpdk-for-mortals.html" . unix) (u . "/2019/05/an-intro-to-dpdk-for-mortals.html") (u . "2019-05-16T20:17:15") (? . 1) #f (c (u . "dpdk") c (u . "c") c (u . "ip")) (u . "\n<p><em>DPDK can be a bit intimidating even if this is not your first time writing C network code. In this (rather long) post, I aim to offer a step by step introduction to DPDK, from understanding its usefulness, to setting up the environment, to finally writing a small program that uses the library. Take your time with the links, the steps and the commands. Don&rsquo;t overwhelm yourself. See you on the other side!</em></p>") #t (u . "\n<p><em>DPDK can be a bit intimidating even if this is not your first time writing C network code. In this (rather long) post, I aim to offer a step by step introduction to DPDK, from understanding its usefulness, to setting up the environment, to finally writing a small program that uses the library. Take your time with the links, the steps and the commands. Don&rsquo;t overwhelm yourself. See you on the other side!</em></p>\n<!-- more-->\n\n<h2 id=\"motivation\">Motivation</h2>\n\n<p>Sometimes you just want to process packets at line rate. This means you need to process about <a href=\"https://www.netgate.com/blog/further-a-roadmap-for-pfsense.html\">14Mpps on a 10Gbps interface</a>. A standard GNU/Linux setup can reach a throughput of <a href=\"https://blog.cloudflare.com/how-to-receive-a-million-packets/\">about 1Mpps</a>. Of course, even 1Mpps is amazingly more packets per second than any one user can know what to do with. Such rates are mostly needed for specialized applications that are running on general purpose computers. But why would one want to do such a thing? Why not buy an embedded black-box enterprise solution, a thingy that is made with low-level stuff (maybe ASICs, FPGAs, native C code) and instead introduce all those layers of abstractions with operating systems and the like?</p>\n\n<p>It&rsquo;s true, such low-level solutions still exist. However there is also a new approach in network architectures called Network Function Virtualization commonly seen as NFV. The idea is that instead of this &lsquo;specialized thingy&rsquo; (<a href=\"https://upload.wikimedia.org/wikipedia/commons/thumb/7/7f/Cisco_small_business_SG300-28_28-port_Gigabit_Ethernet_rackmount_switch.jpg/800px-Cisco_small_business_SG300-28_28-port_Gigabit_Ethernet_rackmount_switch.jpg\">like this one</a>) you instead use a general purpose computer (<a href=\"https://upload.wikimedia.org/wikipedia/commons/8/85/Macpro.png\">like this one</a>). What&rsquo;s good with such a computer is that everything can be virtual. You can spawn OSs, switches, even whole LANs, all inside this server. You can even interconnect many such computers and make even more intricate topologies and operations. When one virtual network is no longer needed you can just shut it down. The empty &lsquo;space&rsquo; left can be covered by an other process that needs to run instead of being wasted. Let alone being able to edit the source code to your needs, make security fixes or develop new features. Of course there is much more to NFV. You can start from <a href=\"https://en.wikipedia.org/wiki/Network_function_virtualization\">wikipedia</a> or <a href=\"https://www.sdxcentral.com/networking/nfv/definitions/whats-network-functions-virtualization-nfv/\">sdxcentral</a> if you are so inclined.</p>\n\n<p>This post is going to be a guide through the setup of such Virtual Network Function all inside your computer, with the help of DPDK of course.</p>\n\n<h2 id=\"what-is-dpdk\">What is DPDK?</h2>\n\n<p>I suppose that if you are reading this you are somewhat familiar with DPDK. However, I can try to give my take on it. If I had to describe DPDK in the simplest fashion I would say this: It is a library written in C that bypasses the kernel, brings the packets to the userspace and offers efficient ways to manipulate them. It preallocates memory (no <code>malloc</code>s during runtime), it polls the NIC instead of using interrupts and uses efficient data structures.</p>\n\n<h2 id=\"what-you-will-need\">What you will need</h2>\n\n<ul>\n <li>A computer with enough RAM (let&rsquo;s say 4GB?) and some kind of GNU/Linux</li>\n <li>Oracle VM VirtualBox</li>\n <li>Open vSwitch</li>\n <li>DPDK</li>\n <li>Fast access to your debugging hat</li></ul>\n\n<h2 id=\"the-main-idea\">The main idea</h2>\n\n<p>Here is what we are going to do: Have your computer spawn a virtual switch which will in turn interconnect three different virtual machines running on VirtualBox, one of which will be the VNF. Here is a picture:</p>\n\n<p><img src=\"../../img/overview-2019.svg\" style=\"border-radius: 2%;display: block;margin-left: auto;margin-right: auto;width: 45%;\" /></p>\n\n<p>The problem is this: Alice and Bob like to send files and messages to each other. However Eve, the evil user of Proxy has configured the switch in such a way that it forwards any packet received to herself too! Now that all packets reach the Proxy, Eve has one final and crucial mission: To build a fast packet capture program, to log everything of interest. Naturally, she has asked for our help, which we will of course happily provide (she doesn&rsquo;t know of <code>tcpdump</code>, shhh&hellip;)</p>\n\n<p>But why is this a VNF? Well because, to put it simply, we can bundle it in a standalone image, and whenever we need a fast packet capturer, boot it with the correct configuration and let everything take care of itself. If the traffic becomes too big for one instance of the packet capturer, we could always make more copies and deploy them accordingly.</p>\n\n<p>This is one of the simplest VNFs one can build. More challenging ones include Deep Packet Inspection VNFs, firewall VNFs, or load balancing VNFs. In all these cases one generally looks in the packet contents to decide what to do with a packet. Drop it? Forward it? Log it? Respond with a certain message to the sender?</p>\n\n<h2 id=\"setting-up-alice-and-bob\">Setting up Alice and Bob</h2>\n\n<p>We can start by giving Alice and Bob two computers to communicate.</p>\n\n<p>To do this, first install <a href=\"https://www.virtualbox.org/\">VirtualBox</a> in some way. This is going to be the place Alice and Bob (and of course later the Proxy) will live. Then, we have to choose an OS for them. I used <a href=\"https://www.ubuntu.com/download/server\">Ubuntu Server</a>. There is no need for a graphical interface. Let&rsquo;s keep it lightweight. After all, we will be spawning three different Virtual Machines.</p>\n\n<p>At the time of writing 18.04 is the latest LTS release and this is what I am going to install. I will then create the first two virtual machines, one called Alice and one called Bob (you can also create the Proxy too, but we will not be using it for now). I used <code>alice</code> and <code>bob</code> as names for the first and the second VM respectively for every name field that was requested. Any configuration I do from now on applies to all the VMs -in cases it does not, I will explicitly say so.</p>\n\n<p>When you first install a Virtual Machine on VirtualBox its network is automatically configured to NAT, as it is a good default. It allows you to have connectivity to &lsquo;the outside world&rsquo; in order to install updates, surf the Internet, etc. However, you can also surf the Internet in a different way, using a <strong>Bridged Adapter</strong> and binding it to your wireless or wired interface. This mode is the one we will be using. You can check out what this and the other networking modes mean <a href=\"https://www.virtualbox.org/manual/ch06.html#networkingmodes\">here</a> and <a href=\"https://blogs.oracle.com/scoter/networking-in-virtualbox-v2\">here</a>. Don&rsquo;t be afraid to become familiar with them if you aren&rsquo;t already!</p>\n\n<p>For our purposes, we will need two interfaces, so enable the first two adapters. <strong>The first one will be used for building our DPDK network and testing our program and the second one in order to have connectivity to the Internet.</strong> Make the first one <strong>Not Attached</strong> (because we haven&rsquo;t created our DPDK network yet) and the second one <strong>Bridged</strong> to your wired or wireless interface (this one is hopefully already there). After you have enabled these two adapters, go ahead and boot the two virtual machines.</p>\n\n<p>By using <em>Bridged Networking</em> on the second adapter, we create a small network in which the <em>host</em> (your laptop or your PC) and all the VMs are visible to each other, as if they are in the same subnet. As a first step, we can check that Alice and Bob can send packets to each other. We can test this by making a simple <code>nmap</code> scan in our local network. Alice and Bob should show up. Something in the lines of <code>nmap -F 192.168.1.1/24</code> should work, adjusting the notation for your own network. This is the output for me</p>\n\n<pre><code>Starting Nmap 7.01 ( https://nmap.org ) at 2019-03-07 19:49 EET\nNmap scan report for gtw (192.168.1.1)\nHost is up (0.029s latency).\nNot shown: 97 closed ports\nPORT    STATE SERVICE\n53/tcp  open  domain\n80/tcp  open  http\n443/tcp open  https\n\nNmap scan report for ngt (192.168.1.5)\nHost is up (0.00032s latency).\nNot shown: 99 closed ports\nPORT   STATE SERVICE\n22/tcp open  ssh\n\nNmap scan report for alice (192.168.1.16)\nHost is up (0.068s latency).\nNot shown: 99 closed ports\nPORT   STATE SERVICE\n22/tcp open  ssh\n\nNmap scan report for bob (192.168.1.17)\nHost is up (0.068s latency).\nNot shown: 99 closed ports\nPORT   STATE SERVICE\n22/tcp open  ssh\n\nNmap done: 256 IP addresses (4 hosts up) scanned in 3.15 seconds</code></pre>\n\n<p>We can see that both <code>alice</code> and <code>bob</code> are up. The other two machines are the default gateway (<code>gtw</code>) and the host (<code>ngt</code>). There are many other tests you can run. For example test if the two machines (<code>alice</code> and <code>bob</code>) can ping each other.</p>\n\n<p>In order to make your life easier for what is to follow, you should edit the <code>/etc/network/interfaces</code> file for each machine. Here is what is should look like:</p>\n\n<div class=\"brush: bash\">\n <div class=\"source\">\n  <pre><span></span><span class=\"c1\"># The loopback network interface</span>\nauto lo\niface lo inet loopback\n\n<span class=\"c1\"># The dpdk-looking interface</span>\nauto enp0s3\nallow-hotplug enp0s3\niface enp0s3 inet static\n        address 172.16.1.22\n        netmask 255.255.255.0\n\n<span class=\"c1\"># The internet-looking interface</span>\nauto enp0s8\nallow-hotplug enp0s8\niface enp0s8 inet dhcp        \n</pre></div>\n\n</div>\n\n<p>There is a non-zero chance that the names of the interfaces will differ in your case. Change them accordingly. (<code>ip link show</code> may help to find out their names). This configuration will tell the first adapter (<code>enp0s3</code>, the one we will use for DPDK) to have a static IP. Notice that we can choose whatever we like as an IP for this interface because the network created with <code>enp0s3</code> will be local and cut out from the rest of the world. You could have thus chosen anything, for example <code>122.122.122.122</code> or <code>10.12.13.14</code>. It doesn&rsquo;t matter (as long as you set the subnet mask correctly). This configuration will also tell your second network adapter (<code>enp0s8</code>, the one bridged with your computer&rsquo;s interface) to request an IP using DHCP. In this way every time you boot the VM, the interfaces will automatically be assigend IP&rsquo;s.</p>\n\n<pre><code>Note:\n  Don't forget to apply this configuration to both machines\n  (they should however have different static IP's, I chose 172.16.1.11 and 172.16.1.22)</code></pre>\n\n<h2 id=\"installing-openssh-server-optional\">Installing openssh-server (optional)</h2>\n\n<p>Because I find having to work with terminal environments in VirtualBox cumbersome, I prefer to install openssh-server and connect to every VM from my terminal. It is very simple to do if you want to:</p>\n\n<div class=\"brush: sh\">\n <div class=\"source\">\n  <pre><span></span><span class=\"c1\"># in your VM (e.g alice)</span>\n$ sudo apt install openssh-server\n\n<span class=\"c1\"># in your host, to connect to alice (IP may differ)</span>\n$ ssh alice@192.168.1.16\n</pre></div>\n\n</div>\n\n<div class=\"brush: sh\">\n <div class=\"source\">\n  <pre><span></span><span class=\"c1\"># and now you can do everything from here!</span>\nLast login: Thu May <span class=\"m\">16</span> 16:38:46 2019\nalice@alice:~$\n</pre></div>\n\n</div>\n\n<h2 id=\"setting-up-the-switch\">Setting up the switch</h2>\n\n<p>We can continue our journey by simply introducing the switch to the equation (before it becomes evil and starts sending packets here and there). Up to now Alice and Bob were connected through their second adapter, with Virtual Box playing the role of the switch. Now we will add our own switch and create a second network using the first adapter. It&rsquo;s something like your computer having two NICs and connecting to two different networks simultaneously. But with the virtual adapters VirtualBox offers, we can do it with no cost at all. Isn&rsquo;t the virtual space beautiful?</p>\n\n<p>As you may have guessed we will use Open vSwitch. Let&rsquo;s install it first. On Ubuntu based distributions this is done like so:</p>\n\n<div class=\"brush: bash\">\n <div class=\"source\">\n  <pre><span></span>sudo apt install openvswitch-switch\n</pre></div>\n\n</div>\n\n<p>but on other distributions you may have to use another package manager. You can consider installing from source too! (more info <a href=\"http://www.openvswitch.org/\">here</a>)</p>\n\n<p>When this is done, go ahead and start the ovs deamon</p>\n\n<pre><code>sudo /usr/local/share/openvswitch/scripts/ovs-ctl start</code></pre>\n\n<p>(the path may vary depending on the way you installed ovs)</p>\n\n<p>this should output something like the following:</p>\n\n<pre><code> * Starting ovsdb-server\n * system ID not configured, please use --system-id\n * Configuring Open vSwitch system IDs\n * Inserting openvswitch module\n * Starting ovs-vswitchd\n * Enabling remote OVSDB managers</code></pre>\n\n<p>You know what this means? That your computer is now a <em>habitable</em> environment for a switch!</p>\n\n<p>Two are the basic command line tools that we are going to use. <code>ovs-vsctl</code> and <code>ovs-ofctl</code>. <code>vsctl</code> stands for VSwitchd ConTroL and as such it is mainly concerned with querying and modifying the OvS database. On the other hand <code>ovs-ofctl</code> stands for OpenFlow ConTroL. From here we can create rules for our switches or see their current status. Anything relating to OpenFlow really.</p>\n\n<ul>\n <li>Let&rsquo;s start by creating a bridge. It&rsquo;s as simple as that:</li></ul>\n\n<div class=\"brush: bash\">\n <div class=\"source\">\n  <pre><span></span> sudo ovs-vsctl add-br br0\n</pre></div>\n\n</div>\n\n<ul>\n <li>Then create two TAP (<a href=\"https://www.saminiir.com/openvpn-puts-packets-inside-your-packets/#tuntap-devices\">link here</a>) interfaces, one for Alice and one for Bob</li></ul>\n\n<div class=\"brush: bash\">\n <div class=\"source\">\n  <pre><span></span>sudo ip tuntap add mode tap vnet-alice\nsudo ip tuntap add mode tap vnet-bob\n</pre></div>\n\n</div>\n\n<ul>\n <li>Bring them up</li></ul>\n\n<div class=\"brush: bash\">\n <div class=\"source\">\n  <pre><span></span>sudo ip link <span class=\"nb\">set</span> vnet-alice up\nsudo ip link <span class=\"nb\">set</span> vnet-bob up\n</pre></div>\n\n</div>\n\n<ul>\n <li>And then add them to the bridge <code>br0</code> as ports</li></ul>\n\n<div class=\"brush: bash\">\n <div class=\"source\">\n  <pre><span></span>sudo ovs-vsctl add-port br0 vnet-alice\nsudo ovs-vsctl add-port br0 vnet-bob\n</pre></div>\n\n</div>\n\n<p>So here is what we essentially get with the above configuration:</p>\n\n<p><img src=\"../../img/bridge-2-2019.svg\" style=\"border-radius: 2%;display: block;margin-left: auto;margin-right: auto;width: 20%;\" /></p>\n\n<p>Those two colored boxes are ports. If this was a real bridge and not a virtual one you could really get your Ethernet cables from each PC and stick each one to the respective port (just like you do when you connect your computer to your home router via Ethernet). Now these cables are virtual too, so we do this &ldquo;sticking&rdquo; through the VirtualBox GUI.</p>\n\n<p>You can now boot the machines with the first Adapter&rsquo;s &lsquo;Attached to&rsquo; set to <strong>Bridged Adapter</strong> (the one we left &ldquo;Not Attached&rdquo; earlier) and the &lsquo;Name&rsquo; set to <code>vnet-alice</code> and <code>vnet-bob</code> accordingly. Due to the configuration we did earlier in <code>/etc/network/interfaces</code> the ports will be assigned IPs. This means that we can get the two machines communicating again, this time over OvS and not over VirtualBox.</p>\n\n<p>To put it differently, now <code>alice</code> and <code>bob</code> can communicate through two distinct routes:</p>\n\n<ul>\n <li>The first one is through your local subnet (in our case <code>192.168.1.1/24</code>)</li>\n <li>And the second one is through the subnet we just created, bridged with OvS (in our case <code>172.16.1.1/24</code>)</li></ul>\n\n<p>(To verify this, try to see that both <code>ping 192.168.1.X</code> and <code>ping 172.16.1.X</code> work, replacing X with a valid IP for each subnet)</p>\n\n<p>The same shown as an image:</p>\n\n<p><img src=\"../../img/whole-network-view-simplest.svg\" style=\"border-radius: 2%;display: block;margin-left: auto;margin-right: auto;width: 60%;\" /></p>\n\n<h2 id=\"making-the-switch-evil\">Making the switch evil</h2>\n\n<p>If you haven&rsquo;t created the third and last VM, now is the time! Let&rsquo;s create the Proxy, the place our DPDK code will run on.</p>\n\n<p>Just create the VM and do the respective configuration we did on Alice and Bob. Here is a quick recap:</p>\n\n<p>On the host:</p>\n\n<div class=\"brush: bash\">\n <div class=\"source\">\n  <pre><span></span>sudo ip tuntap add mode tap vnet-proxy\nsudo ip link <span class=\"nb\">set</span> vnet-proxy up\nsudo ovs-vsctl add-port br0 vnet-proxy\n</pre></div>\n\n</div>\n\n<p>On the VM:</p>\n\n<div class=\"brush: bash\">\n <div class=\"source\">\n  <pre><span></span><span class=\"c1\"># edit /etc/network/interfaces</span>\n\n<span class=\"c1\"># The loopback network interface</span>\nauto lo\niface lo inet loopback\n\n<span class=\"c1\"># The dpdk-looking interface</span>\nauto enp0s3\nallow-hotplug enp0s3\niface enp0s3 inet static\n        address 172.16.1.66\n        netmask 255.255.255.0\n\n<span class=\"c1\"># The internet-looking interface</span>\nauto enp0s8\nallow-hotplug enp0s8\niface enp0s8 inet dhcp        \n</pre></div>\n\n</div>\n\n<p>On the Proxy Virtual Box Network Settings, set the first adapter to connect to <code>vnet-proxy</code> and the second one to your network, just like we did before.</p>\n\n<p><strong>Also, it is very important to set the Promiscuous mode to <em>Allow all</em> or else VirtualBox will drop the packets not destined for Proxy (which we of course don&rsquo;t like)</strong></p>\n\n<p>To see some more information on the bridge and its various ports we can issue the command</p>\n\n<div class=\"brush: bash\">\n <div class=\"source\">\n  <pre><span></span>sudo ovs-ofctl show br0\n</pre></div>\n\n</div>\n\n<p>in my case the output is</p>\n\n<pre><code>OFPT_FEATURES_REPLY (xid=0x2): dpid:00005e6ae5a0cd4e\nn_tables:254, n_buffers:0\ncapabilities: FLOW_STATS TABLE_STATS PORT_STATS QUEUE_STATS ARP_MATCH_IP\nactions: output enqueue set_vlan_vid set_vlan_pcp strip_vlan mod_dl_src\n        mod_dl_dst mod_nw_src mod_nw_dst mod_nw_tos mod_tp_src mod_tp_dst\n 1(vnet-alice): addr:16:98:bf:30:4d:aa\n     config:     0\n     state:      LINK_DOWN\n     current:    10MB-FD COPPER\n     speed: 10 Mbps now, 0 Mbps max\n 2(vnet-bob): addr:32:1b:e4:76:a8:5b\n     config:     0\n     state:      LINK_DOWN\n     current:    10MB-FD COPPER\n     speed: 10 Mbps now, 0 Mbps max\n 3(vnet-proxy): addr:1e:73:60:93:58:64\n     config:     0\n     state:      LINK_DOWN\n     current:    10MB-FD COPPER\n     speed: 10 Mbps now, 0 Mbps max\n LOCAL(br0): addr:5e:6a:e5:a0:cd:4e\n     config:     PORT_DOWN\n     state:      LINK_DOWN\n     speed: 0 Mbps now, 0 Mbps max\nOFPT_GET_CONFIG_REPLY (xid=0x4): frags=normal miss_send_len=0</code></pre>\n\n<p>Thus <code>port 1</code> is Alice, <code>port 2</code> is Bob and <code>port 3</code> is the Proxy. It may be different in your case but it won&rsquo;t matter. Here is the updated view of our bridge:</p>\n\n<p><img src=\"../../img/bridge-2019.svg\" style=\"border-radius: 2%;display: block;margin-left: auto;margin-right: auto;width: 30%;\" /></p>\n\n<p>Now it&rsquo;s time for the <code>br0</code> to become evil. For it to be evil, it has to have a way to forward packets to PC-Proxy when they conform to certain criteria.</p>\n\n<p>Let&rsquo;s add some rules then. These rules will modify the switch in such a way that every packet will reach Proxy too.</p>\n\n<div class=\"brush: bash\">\n <div class=\"source\">\n  <pre><span></span><span class=\"c1\"># delete old rules</span>\nsudo ovs-ofctl del-flows br0\n<span class=\"c1\"># anything sent to Alice must be forwarded to both vnet-proxy and vnet-alice</span>\nsudo ovs-ofctl add-flow br0 <span class=\"nv\">in_port</span><span class=\"o\">=</span><span class=\"s2\">\"vnet-alice\"</span>,actions<span class=\"o\">=</span>output:<span class=\"s2\">\"vnet-proxy\"</span>,normal\n<span class=\"c1\"># anything sent to Bob must be forwarded to both vnet-proxy and vnet-bob</span>\nsudo ovs-ofctl add-flow br0 <span class=\"nv\">in_port</span><span class=\"o\">=</span><span class=\"s2\">\"vnet-bob\"</span>,actions<span class=\"o\">=</span>output:<span class=\"s2\">\"vnet-proxy\"</span>,normal\n</pre></div>\n\n</div>\n\n<h2 id=\"dpdk-to-the-rescue\">DPDK to the rescue</h2>\n\n<p>It&rsquo;s about time we did some coding. The switch is sending us the packets Alice and Bob are exchanging but we have no way yet to see them! (well, excluding <code>tcpdum</code> :P). We will now build our simple packet capture utility using DPDK. It won&rsquo;t be elaborate at all, however, if you are anything like me when I first used DPDK, it could be your first time writing C programs to capture real traffic! And this is amazing.</p>\n\n<p>We will now get the dpdk sources, compile the project and modify our network card so that we can run dpdk code on it. For this, boot PC-Proxy and issue these commands.</p>\n\n<div class=\"brush: bash\">\n <div class=\"source\">\n  <pre><span></span>sudo apt install -y make gcc libnuma-dev build-essential python pkg-config\n\nwget https://fast.dpdk.org/rel/dpdk-18.05.1.tar.xz\n\ntar xf dpdk-18.05.1.tar.xz\n\nmv dpdk-stable-18.05.1 dpdk\n</pre></div>\n\n</div>\n\n<p>There are a few more steps before we can really start the development cycle. We have to set up everything the way DPDK wants it to be in order to work. Luckily, DPDK has bundled in some useful scripts so that we don&rsquo;t have to reinvent the wheel. Navigate to <code>dpdk/usertools/</code> and look for the file called <code>dpdk-setup.py</code>. The name of the file does not lie, it will indeed help us set it up.</p>\n\n<pre><code>Tip:\n  Here are some useful commands for when using the shell:\n  Ctrl-A brings you to the beginning of the line\n  Ctrl-E brings you to the end of the line\n  Ctrl-U deletes everything you have written in the line</code></pre>\n\n<p>Before executing it, first bring down the interface you decided to give to DPDK. DPDK will take over it now. In my case, I used this command:</p>\n\n<pre><code>sudo ifconfig enp0s3 down</code></pre>\n\n<p>Now we are ready to run <code>dpdk-setup.py</code>. When you first run the script you will be met with a looong list of available operations. However only some are relevant to us.</p>\n\n<pre><code>Tip:\n  Shift - (PgUp/PgDn) is your friend (or Ctrl-Shift, depending on the terminal)</code></pre>\n\n<ol>\n <li><strong>Compile</strong> (I use No. <code>15</code>, x86_64 with gcc)</li>\n <li><strong>Insert the driver</strong> (I use No. <code>18</code>, igb_uio)</li>\n <li><strong>Create hugepages for non-NUMA systems</strong> (No. <code>21</code>, 64 should be fine)</li>\n <li><strong>Bind the network interface to dpdk</strong> (No. <code>24</code> aaaand &hellip; dpdk takes over the network interface!)</li></ol>\n\n<p>Aaahhh, at last. We can write some code</p>\n\n<h2 id=\"developing-the-packet-capture\">Developing the packet capture</h2>\n\n<p>The <em>skeleton</em> of our development endeavors is going to be a file dpdk offers bundled with the library under the <code>examples/</code>. It is a <em>bear bones</em> application that has some annoying things already taken care of so that we can focus on developing the logic. I don&rsquo;t know if you took the hint but the file we are interested in is indeed under <code>skeleton/</code>. It is called basicfwd.c and it has a very very simple dpdk application. I like this file because it deals with all the initialization stuff so that we don&rsquo;t have to mess with them yet, and also leaves enough space to make small changes and observe the outcome.</p>\n\n<p>This program does some things that we don&rsquo;t want it to do. So first of, we are going to remove some unnecessary code and then insert our own. What this program does essentially, is to receive frames in one port and forward them in a second one. We, however, only want to receive packets and maybe print them to the screen. Nothing more. So there are a couple of places even the <em>skeleton</em> contains too much for our purposes. There is still some code that we will have to remove. Then we add our own.</p>\n\n<p>The whole file is just three functions, <code>port_init()</code>, <code>lcore_main()</code> and <code>main()</code>. <code>port_init()</code> we don&rsquo;t even care about. We pray it does what it claims it does correctly and move on. The <code>main()</code> function we only care about slightly, to the extend that we can see the general structure of the program; initialize this, take that, call the other function etc. Our changes will be focused on <code>lcore_main()</code>. A function that essentially is called and then runs forever.</p>\n\n<p>It is during this function call that packets are &ldquo;received&rdquo; and can be &ldquo;sent&rdquo;. On of the ways DPDK can take data from the wire is the function <code>rte_eth_rx_burst()</code> which when called fills in a buffer of packets. The buffer can be thought of as a chunk of memory where the packets reside after the call. It returns the number of packets that where eventually received. So then <code>buf[0]</code> is the first packet, <code>buf[1]</code> is the second, and so on. This buffer except for the data that were indeed in the wire, contains some metadata. So in order to reach the point the real data is, we can use a function DPDK conveniently provides just for this purpose. This is <code>rte_pktmbuf_mtod</code>. Here is how it works</p>\n\n<div class=\"brush: c\">\n <div class=\"source\">\n  <pre><span></span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;rte_ip.h&gt;</span><span class=\"cp\"></span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;rte_tcp.h&gt;</span><span class=\"cp\"></span>\n\n<span class=\"c1\">// fill in the buffer</span>\n<span class=\"k\">const</span> <span class=\"kt\">uint16_t</span> <span class=\"n\">nb_rx</span> <span class=\"o\">=</span> <span class=\"n\">rte_eth_rx_burst</span><span class=\"p\">(</span><span class=\"n\">port</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">bufs</span><span class=\"p\">,</span> <span class=\"n\">BURST_SIZE</span><span class=\"p\">);</span>\n<span class=\"c1\">// now bufs is an array (of length nb_rx) of packets together with their metadata</span>\n\n<span class=\"c1\">// take the first packet and make eth point to the start of the Ethernet frame</span>\n<span class=\"k\">struct</span> <span class=\"n\">ether_hdr</span> <span class=\"o\">*</span><span class=\"n\">eth</span> <span class=\"o\">=</span> <span class=\"n\">rte_pktmbuf_mtod</span><span class=\"p\">(</span><span class=\"n\">bufs</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"k\">struct</span> <span class=\"n\">ether_hdr</span><span class=\"o\">*</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// to reach the ip header, it is much simpler, just some pointer arithmetic</span>\n<span class=\"k\">struct</span> <span class=\"n\">ipv4_hdr</span> <span class=\"o\">*</span><span class=\"n\">ip</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"k\">struct</span> <span class=\"n\">ipv4_hdr</span><span class=\"o\">*</span><span class=\"p\">)(</span><span class=\"n\">eth</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// the same to reach the tcp header</span>\n<span class=\"k\">struct</span> <span class=\"n\">tcp_hdr</span> <span class=\"o\">*</span><span class=\"n\">tcp</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"k\">struct</span> <span class=\"n\">tcp_hdr</span><span class=\"o\">*</span><span class=\"p\">)(</span><span class=\"n\">ip</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n</pre></div>\n\n</div>\n\n<p>Now that we know how to get hold of the packets, let&rsquo;s start editing.</p>\n\n<h3 id=\"remove-the-even-port-check\">Remove: the &lsquo;even port&rsquo; check</h3>\n\n<p>For our purposes we don&rsquo;t care if the number of available ports is even or odd. We just need one! The one port that receives the packets. So remove</p>\n\n<div class=\"brush: c\">\n <div class=\"source\">\n  <pre><span></span><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">nb_ports</span> <span class=\"o\">&lt;</span> <span class=\"mi\">2</span> <span class=\"o\">||</span> <span class=\"p\">(</span><span class=\"n\">nb_ports</span> <span class=\"o\">&amp;</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n        <span class=\"n\">rte_exit</span><span class=\"p\">(</span><span class=\"n\">EXIT_FAILURE</span><span class=\"p\">,</span> <span class=\"s\">\"Error: number of ports must be even</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">);</span>\n</pre></div>\n\n</div>\n\n<h3 id=\"remove-the-txburst\">Remove: the &lsquo;tx_burst&rsquo;</h3>\n\n<p>We don&rsquo;t want to send anything, we just want to capture packets. (You could however, and wreck havoc on your network. You would essentially duplicate each received frame). So remove</p>\n\n<div class=\"brush: c\">\n <div class=\"source\">\n  <pre><span></span><span class=\"cm\">/* Send burst of TX packets, to second port of pair. */</span>\n<span class=\"k\">const</span> <span class=\"kt\">uint16_t</span> <span class=\"n\">nb_tx</span> <span class=\"o\">=</span> <span class=\"n\">rte_eth_tx_burst</span><span class=\"p\">(</span><span class=\"n\">port</span> <span class=\"o\">^</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">bufs</span><span class=\"p\">,</span> <span class=\"n\">nb_rx</span><span class=\"p\">);</span>\n</pre></div>\n\n</div>\n\n<pre><code>Note:\n  In network code, TX is used to mean Transmit and RX to mean Receive</code></pre>\n\n<h3 id=\"remove-the-if-tx--rx-check\">Remove: the &lsquo;if tx &lt; rx&rsquo; check</h3>\n\n<p>A check is made like to see if some packets were not transmitted, and if it is true free them. Given that this will always be the case in our example, there is no need to test for it. (we only remove the outer <code>if</code>, we still want to free the buffers in the <code>for</code> loop)</p>\n\n<div class=\"brush: c\">\n <div class=\"source\">\n  <pre><span></span><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">unlikely</span><span class=\"p\">(</span><span class=\"n\">nb_tx</span> <span class=\"o\">&lt;</span> <span class=\"n\">nb_rx</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n    <span class=\"p\">...</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n</div>\n\n<p>At this point we are free to write our code.</p>\n\n<h3 id=\"add-the-print-mac-address-function\">Add: the &lsquo;print MAC address&rsquo; function</h3>\n\n<p>Usually my first step in writing code is to create function that will give some visual queues to see if everything is normal. In this case my first step was to create a function to print the a MAC address. When I receive a packet I send the Source and Destination MAC address to this function. That way I can clearly see if I am getting the frames I am supposed to when executing the program. After all, what is a packet capturing utility without seeing some MAC addresses?</p>\n\n<div class=\"brush: c\">\n <div class=\"source\">\n  <pre><span></span><span class=\"kt\">void</span> <span class=\"nf\">print_mac</span><span class=\"p\">(</span><span class=\"k\">struct</span> <span class=\"n\">ether_addr</span> <span class=\"n\">addr</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"se\">\\t</span><span class=\"s\">%02\"</span> <span class=\"n\">PRIx8</span> <span class=\"s\">\" %02\"</span> <span class=\"n\">PRIx8</span> <span class=\"s\">\" %02\"</span> <span class=\"n\">PRIx8</span>\n               <span class=\"s\">\" %02\"</span> <span class=\"n\">PRIx8</span> <span class=\"s\">\" %02\"</span> <span class=\"n\">PRIx8</span> <span class=\"s\">\" %02\"</span> <span class=\"n\">PRIx8</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span>\n            <span class=\"n\">addr</span><span class=\"p\">.</span><span class=\"n\">addr_bytes</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">addr</span><span class=\"p\">.</span><span class=\"n\">addr_bytes</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span>\n            <span class=\"n\">addr</span><span class=\"p\">.</span><span class=\"n\">addr_bytes</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">addr</span><span class=\"p\">.</span><span class=\"n\">addr_bytes</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">],</span>\n            <span class=\"n\">addr</span><span class=\"p\">.</span><span class=\"n\">addr_bytes</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">],</span> <span class=\"n\">addr</span><span class=\"p\">.</span><span class=\"n\">addr_bytes</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">]);</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n</div>\n\n<p>This function takes as a parameter a structure <code>struct ether_addr</code> that is <a href=\"https://doc.dpdk.org/api/structether__hdr.html\">defined</a> in the DPDK API. It contains the Destination and Source MAC addresses and the Ethernet Type. We can simply call it as <code>print_mac(eth-&gt;d_addr)</code> to print out the destination address.</p>\n\n<h3 id=\"add-the-print-ip-address-function\">Add: the &lsquo;print IP address&rsquo; function</h3>\n\n<p>MAC addresses are good, but IP addresses are even better. Here is a function to print them.</p>\n\n<div class=\"brush: c\">\n <div class=\"source\">\n  <pre><span></span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;arpa/inet.h&gt;</span><span class=\"cp\"></span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">print_ip</span><span class=\"p\">(</span><span class=\"kt\">uint32_t</span> <span class=\"n\">ipn</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kt\">uint8_t</span> <span class=\"n\">bytes</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">];</span>\n    <span class=\"kt\">uint32_t</span> <span class=\"n\">ip</span> <span class=\"o\">=</span> <span class=\"n\">ntohl</span><span class=\"p\">(</span><span class=\"n\">ipn</span><span class=\"p\">);</span>\n    <span class=\"n\">bytes</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">ip</span> <span class=\"o\">&gt;&gt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span> <span class=\"mh\">0xFF</span><span class=\"p\">;</span>\n    <span class=\"n\">bytes</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">ip</span> <span class=\"o\">&gt;&gt;</span> <span class=\"mi\">8</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span> <span class=\"mh\">0xFF</span><span class=\"p\">;</span>\n    <span class=\"n\">bytes</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">ip</span> <span class=\"o\">&gt;&gt;</span> <span class=\"mi\">16</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span> <span class=\"mh\">0xFF</span><span class=\"p\">;</span>\n    <span class=\"n\">bytes</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">ip</span> <span class=\"o\">&gt;&gt;</span> <span class=\"mi\">24</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span> <span class=\"mh\">0xFF</span><span class=\"p\">;</span>\n\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"se\">\\t</span><span class=\"s\">%d.%d.%d.%d</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span> <span class=\"n\">bytes</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"n\">bytes</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">bytes</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">bytes</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]);</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n</div>\n\n<h3 id=\"add-the-hexdump-capability\">Add: the &lsquo;hexdump&rsquo; capability</h3>\n\n<p>DPDK has a built-in function to print hexdumps. It is a nice feature to have in a packet capturer. The only thing we need is to include the header and then the function becomes available to us.</p>\n\n<div class=\"brush: c\">\n <div class=\"source\">\n  <pre><span></span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;rte_hexdump.h&gt;</span><span class=\"cp\"></span>\n\n<span class=\"p\">...</span>\n\n<span class=\"n\">rte_hexdump</span><span class=\"p\">(</span><span class=\"n\">stdout</span><span class=\"p\">,</span> <span class=\"nb\">NULL</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">void</span><span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">)</span>\n</pre></div>\n\n</div>\n\n<p>At this point we have everything we need to make an elementary packet capture utility.</p>\n\n<h2 id=\"running-your-program\">Running your program</h2>\n\n<p>You&rsquo;ve made some changes. Now it&rsquo;s time to test them.</p>\n\n<pre><code>Tip:\n  Don't forget to run the executable with `sudo`\n\nTip:\n  You have to export the variable RTE_SDK so that the compiler knows where to find the DPDK sources</code></pre>\n\n<pre><code>dproxy@proxy:~$ cd dpdk\ndproxy@proxy:~/dpdk$ export RTE_SDK=$(pwd)  # must be set to the root of dpdk!\ndproxy@proxy:~/dpdk$ cd examples/skeleton/\ndproxy@proxy:~/dpdk/examples/skeleton$ make\n  CC basicfwd.o\n  LD basicfwd\n  INSTALL-APP basicfwd\n  INSTALL-MAP basicfwd.map\ndproxy@proxy:~/dpdk/examples/skeleton$ sudo ./build/basicfwd\n[sudo] password for dproxy:\nEAL: Detected 2 lcore(s)\nEAL: Detected 1 NUMA nodes\nEAL: Multi-process socket /var/run/dpdk/rte/mp_socket\nEAL: Probing VFIO support...\nEAL: PCI device 0000:00:03.0 on NUMA socket -1\nEAL:   Invalid NUMA socket, default to 0\nEAL:   probe driver: 8086:100e net_e1000_em\nEAL: PCI device 0000:00:08.0 on NUMA socket -1\nEAL:   Invalid NUMA socket, default to 0\nEAL:   probe driver: 8086:100e net_e1000_em\nPort 0 MAC: 08 00 27 77 3e 77\n\nWARNING: Too many lcores enabled. Only 1 used.\n\nCore 0 forwarding packets. [Ctrl+C to quit]\n^C\ndproxy@proxy:~/dpdk/examples/skeleton$\n</code></pre>\n\n<p>And that&rsquo;s it!</p>\n\n<h3 id=\"you-can-find-the-code-i-used-in-a-gist-httpsgistgithubcombillpcsb4cecf4d65768aaabe8c0ba9eca34038here\">You can find the code I used in a gist <a href=\"https://gist.github.com/billpcs/b4cecf4d65768aaabe8c0ba9eca34038\">here</a></h3>\n\n<h3 id=\"you-can-find-the-program-in-action-httpsiimgurcomzxmhdcpmp4here-20mb-gif\">You can find the program in action <a href=\"https://i.imgur.com/ZxMhdCp.mp4\">here</a> (20MB gif)</h3>\n\n<p>Sources:</p>\n\n<ul>\n <li>https://www.netgate.com/blog/further-a-roadmap-for-pfsense.html</li>\n <li>https://blog.cloudflare.com/how-to-receive-a-million-packets/</li>\n <li>https://www.sdxcentral.com/networking/nfv/definitions/whats-network-functions-virtualization-nfv/</li>\n <li>https://www.virtualbox.org/manual/ch06.html</li>\n <li>https://blogs.oracle.com/scoter/networking-in-virtualbox-v2</li>\n <li>https://www.saminiir.com/openvpn-puts-packets-inside-your-packets/</li>\n <li>https://www.youtube.com/user/mahler711/</li>\n <li>https://lwn.net/Articles/629155/</li></ul>")) ((p+ #"/home/bill/Dropbox/CurrentlyWorkedOn/billpcs.github.io/_src/posts/2017-05-20-abstraction-through-an-example.md" . unix) f post (u . "The Power Of Abstraction") (? . 3) 1555348421 (p+ #"/home/bill/Dropbox/CurrentlyWorkedOn/billpcs.github.io/2017/05/the-power-of-abstraction.html" . unix) (u . "/2017/05/the-power-of-abstraction.html") (u . "2017-05-20T21:34:27") (? . 2) (? . 1) (c (u . "theory")) (u . "\n<h3 id=\"a-simple-demonstration\">A simple demonstration</h3>\n\n<p>You are outside a restaurant. You get in and sit at a table. The waiter brings you the menu and you choose a steak. You tell the waiter about your decision and after some time (hopefully not too much) the waiter brings a steak to your table. You eat the steak and leave.</p>") #t (u . "\n<h3 id=\"a-simple-demonstration\">A simple demonstration</h3>\n\n<p>You are outside a restaurant. You get in and sit at a table. The waiter brings you the menu and you choose a steak. You tell the waiter about your decision and after some time (hopefully not too much) the waiter brings a steak to your table. You eat the steak and leave.</p>\n<!-- more-->\n\n<p><strong>To really understand what powerful a concept abstraction is, let&rsquo;s examine how your night would have changed if abstractions were non existent.</strong></p>\n\n<p>You are outside a restaurant. You get in and sit at a table. You wait for the waiter to come and bring you a menu, but after about 5 minutes you loose your patience. You get up and try to find a menu yourself. After spending a couple of minutes searching you realize there are no menus lying around. &ldquo;Anyway&rdquo;, you think, &ldquo;I already know what I want, I will have a steak&rdquo;. You look around to find the waiter and inform him about your choice. But of course, you have seen no waiter from the time you came in. It has been a long time since you last had a meal so, hungry as you are, you decide to visit the kitchen and tell them yourself about your steak. Frustrated, you storm in only in your amazement, to find no one there. You are truly puzzled by now. But you are more hungry than puzzled so you open the kitchen fridge.</p>\n\n<p>You get the idea. This can go further and further. You could open the fridge only to find it empty. Because there is no one to supply the steaks to the restaurant. You have to drive on your own to the farm, raise your own animals. Feed them on your own and find their food on your own.</p>\n\n<p>You could go as far as to say that you would have to make your own forks, your own chairs, your own fridges, your own trucks, your own stables. Because nothing is made for you. You would have to reach the bare metal to imagine an end to this chain.</p>\n\n<p><strong>Did you notice? The raw materials are there, they are not missing! It is just that there is nobody to abstract them in order to reach you.</strong></p>\n\n<h3 id=\"so-here-is-how-abstraction-works-in-this-context\">So here is how abstraction works in this context.</h3>\n\n<p>You don&rsquo;t care how the waiter will pass on your order to the kitchen. It could be by words, by a piece of paper, or by an App on his smart-phone. As long as he does it correctly you don&rsquo;t mind. The waiter on his part, does not care how the kitchen master will cook the steak. He could have his assistants do it, he could do it by himself, use that or the other recipe. The cook is only constrained by what this piece of paper says he has to prepare. When he finishes the dish, he just places it in a special place where the waiter can find it and deliver it to you. In much the same way, we can move down the chain.The cook doesn&rsquo;t care how the meat got in the kitchen, as long as it meets his standards, the driver that brought it doesn&rsquo;t care what kind of meat the box contains, or how it was made, as long as he delivers to the recipient labeled on the box. Moving further down, the meat company CEO has no interest in knowing the specifics of this meat order by the restaurant, as long as his company complies with health and quality standards and there is someone to do the distribution.</p>\n\n<p><strong>See the pattern? Nobody has to know how anyone above or below him/her works. The only trait needed is to know how to interact with them.</strong></p>\n\n<p>One could write endless pages thinking about abstractions and relations in our daily world. But let me stop here.</p>\n\n<ul>\n <li>\n  <p>The above example may seem obvious. And I will argue that it is. <strong>But only because this pyramid of duties had time to adapt throughout the human history. The challenge comes when you need to scale a system like a company, a product or a protocol with no errors and in little to no time.</strong></p></li>\n <li>\n  <p>My goal is to write some follow ups to this post analyzing some of the greatest incarnations of abstractions in technology in todays world.</p></li></ul>")) ((p+ #"/home/bill/Dropbox/CurrentlyWorkedOn/billpcs.github.io/_src/posts/2016-12-16-test-blog-post.md" . unix) f post (u . "The first blog post") (? . 2) 1555348421 (p+ #"/home/bill/Dropbox/CurrentlyWorkedOn/billpcs.github.io/2016/12/the-first-blog-post.html" . unix) (u . "/2016/12/the-first-blog-post.html") (u . "2016-12-16T17:07:17") #f (? . 3) (c (u . "ip") c (u . "scala") c (u . "python")) (u . "\n<h3 id=\"undestanding--by-doing-something-else\">Undestanding <a href=\"https://github.com/greghendershott/frog\"><strong><em>frog</em></strong></a> (by doing something else)</h3>\n\n<p>I will try to write a function to convert a bit-stream (in the form of a string) to its representation as an <a href=\"https://en.wikipedia.org/wiki/IP_address#IPv4_addresses\">IPv4</a> address.</p>\n\n<p>The catch is, the code must be as concise as possible.</p>") #t (u . "\n<h3 id=\"undestanding--by-doing-something-else\">Undestanding <a href=\"https://github.com/greghendershott/frog\"><strong><em>frog</em></strong></a> (by doing something else)</h3>\n\n<p>I will try to write a function to convert a bit-stream (in the form of a string) to its representation as an <a href=\"https://en.wikipedia.org/wiki/IP_address#IPv4_addresses\">IPv4</a> address.</p>\n\n<p>The catch is, the code must be as concise as possible.</p>\n<!-- more-->\n\n<p><strong><em>Let&rsquo;s try Scala!</em></strong></p>\n\n<p>Scala can be very concise and yet readable with some nicely written chains of operations. Let&rsquo;s see it in action here:</p>\n\n<div class=\"brush: scala\">\n <div class=\"source\">\n  <pre><span></span>  <span class=\"k\">def</span> <span class=\"n\">toIp</span><span class=\"o\">(</span><span class=\"n\">str</span><span class=\"k\">:</span> <span class=\"kt\">String</span><span class=\"o\">)</span> <span class=\"k\">=</span>\n     <span class=\"n\">str</span><span class=\"o\">.</span><span class=\"n\">grouped</span><span class=\"o\">(</span><span class=\"mi\">8</span><span class=\"o\">)</span>\n        <span class=\"o\">.</span><span class=\"n\">map</span><span class=\"o\">(</span><span class=\"n\">el</span> <span class=\"k\">=&gt;</span> <span class=\"nc\">Integer</span><span class=\"o\">.</span><span class=\"n\">parseInt</span><span class=\"o\">(</span><span class=\"n\">el</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">))</span>\n        <span class=\"o\">.</span><span class=\"n\">mkString</span><span class=\"o\">(</span><span class=\"s\">\".\"</span><span class=\"o\">)</span>   \n</pre></div>\n\n</div>\n\n<p>The <code>grouped(n)</code> method is defined for all the members of <code>scala.collection.IterableLike</code> which <code>String</code> is a member of. But let&rsquo;s not get too involved.</p>\n\n<p>What it does is given <strong>&ldquo;123456&rdquo;</strong> return an iterator with the contents grouped every <strong><em>nth</em></strong> character, i.e if n is 2 then we get <code>(\"12\", \"34\", \"56\")</code> which is perfect for this job.</p>\n\n<p>All we have to do then, is map each one to its decimal representation and be done with it.</p>\n\n<p>Now we can just say</p>\n\n<div class=\"brush: scala\">\n <div class=\"source\">\n  <pre><span></span>  <span class=\"k\">@</span> <span class=\"n\">toIp</span><span class=\"o\">(</span><span class=\"s\">\"10000000000010100000001000011110\"</span><span class=\"o\">)</span>\n  <span class=\"n\">res1</span><span class=\"k\">:</span> <span class=\"kt\">String</span> <span class=\"o\">=</span> <span class=\"s\">\"128.10.2.30\"</span>\n</pre></div>\n\n</div>\n\n<p><strong><em>Let&rsquo;s try Python!</em></strong></p>\n\n<p>The best way I could come up with, without making and import, is this</p>\n\n<div class=\"brush: python\">\n <div class=\"source\">\n  <pre><span></span>  <span class=\"k\">def</span> <span class=\"nf\">to_ip</span><span class=\"p\">(</span><span class=\"n\">bitstr</span><span class=\"p\">):</span>\n    <span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">bitstr</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">:</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">8</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">bitstr</span><span class=\"p\">),</span> <span class=\"mi\">8</span><span class=\"p\">)]</span>\n    <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">lst</span><span class=\"p\">]</span>\n    <span class=\"k\">return</span> <span class=\"s1\">&#39;.&#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">)</span>\n</pre></div>\n\n</div>\n\n<p>and then you can simply call</p>\n\n<div class=\"brush: python\">\n <div class=\"source\">\n  <pre><span></span>  <span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">to_ip</span><span class=\"p\">(</span><span class=\"s2\">\"10000000000010100000001000011110\"</span><span class=\"p\">))</span>\n  <span class=\"mf\">128.10</span><span class=\"o\">.</span><span class=\"mf\">2.30</span>\n</pre></div>\n\n</div>\n\n<p>But one would argue that python is no good without the imports. And I agree, so let&rsquo;s try the same thing, but now with the help of an import.</p>\n\n<div class=\"brush: python\">\n <div class=\"source\">\n  <pre><span></span>  <span class=\"kn\">import</span> <span class=\"nn\">re</span>\n  <span class=\"k\">def</span> <span class=\"nf\">to_ip2</span><span class=\"p\">(</span><span class=\"n\">bitstr</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"s1\">&#39;.&#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">([</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">findall</span><span class=\"p\">(</span><span class=\"s1\">&#39;........?&#39;</span><span class=\"p\">,</span> <span class=\"n\">bitstr</span><span class=\"p\">)])</span>\n</pre></div>\n\n</div>\n\n<p>so now we can call it again and get the expected results</p>\n\n<div class=\"brush: python\">\n <div class=\"source\">\n  <pre><span></span>  <span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">to_ip2</span><span class=\"p\">(</span><span class=\"s2\">\"10000000000010100000001000011110\"</span><span class=\"p\">))</span>\n  <span class=\"mf\">128.10</span><span class=\"o\">.</span><span class=\"mf\">2.30</span>\n</pre></div>\n\n</div>\n\n<p>This is quite concise but it becomes difficult to read.</p>\n\n<p>The classic readability/conciseness problem.</p>\n\n<p>I would argue that it is much clearer in Scala, without giving way to less conciseness.</p>")) ((p+ #"/home/bill/Dropbox/CurrentlyWorkedOn/billpcs.github.io/_src/posts/2018-03-25-sdes-in-scala.md" . unix) f post (u . "SDES in Scala") (? . 1) 1555348421 (p+ #"/home/bill/Dropbox/CurrentlyWorkedOn/billpcs.github.io/2018/03/sdes-in-scala.html" . unix) (u . "/2018/03/sdes-in-scala.html") (u . "2018-03-25T16:22:29") (? . 3) (? . 0) (c (u . "scala") c (u . "cryptography")) (u . "\n<h1 id=\"implementing-simplified-data-encryption-standard-in-scala\">Implementing Simplified Data Encryption Standard in Scala</h1>\n\n<p><em>(I intended for this blog post to be a full explanation of my SDES implementation, but it got too long too fast. Therefore, in this post I focused mostly on the binary number representation and didn&rsquo;t analyze other topics such as the test suite and the class hierarchies, topics that I will maybe address in a future post &mdash;probably never)</em></p>\n\n<h3 id=\"intro\">Intro</h3>\n\n<p><a href=\"https://en.wikipedia.org/wiki/Data_Encryption_Standard\">DES</a> is a symmetric algorithm for encrypting data. Simplified DES or SDES, as I will refer to it from now on, is a simple version of DES, which is used to familiarize the students with the inner workings of the algorithm without getting too involved with details. I happened to implement it for a semester course project and below are some of my thoughts.</p>") #t (u . "\n<h1 id=\"implementing-simplified-data-encryption-standard-in-scala\">Implementing Simplified Data Encryption Standard in Scala</h1>\n\n<p><em>(I intended for this blog post to be a full explanation of my SDES implementation, but it got too long too fast. Therefore, in this post I focused mostly on the binary number representation and didn&rsquo;t analyze other topics such as the test suite and the class hierarchies, topics that I will maybe address in a future post &mdash;probably never)</em></p>\n\n<h3 id=\"intro\">Intro</h3>\n\n<p><a href=\"https://en.wikipedia.org/wiki/Data_Encryption_Standard\">DES</a> is a symmetric algorithm for encrypting data. Simplified DES or SDES, as I will refer to it from now on, is a simple version of DES, which is used to familiarize the students with the inner workings of the algorithm without getting too involved with details. I happened to implement it for a semester course project and below are some of my thoughts.</p>\n<!-- more-->\n\n<h3 id=\"what-i-wanted-to-do-differently\">What I wanted to do differently</h3>\n\n<p>One of the first things I had to consider was how the binary numbers were going to be dealt with internally. Programming languages don&rsquo;t usually have variable types for &ldquo;Bit&rdquo;. The variable type with the smallest amount of memory you can generally get is a Byte. SDES uses binary numbers of three sizes: <strong>4</strong>, <strong>8</strong> and <strong>10 bit</strong> numbers.</p>\n\n<p>What I came across regularly when browsing solutions on SDES was people saving binary numbers as arrays of integers, meaning saving 1&rsquo;s and 0&rsquo;s in an array. I didn&rsquo;t like this approach for various reasons. Firstly, it wastes too much space. This is because, even though we save the information of <strong>one</strong> bit in one array cell, it takes the space of at least 8 bits, if we decide to make it an Array[Byte] (and this is the best we can do in terms of memory with this type). This also means that we have to implement bitwise operations that are used extensively in SDES, from scratch. A <em>bitwise xor</em> for example would probably have to be implemented as presented below:</p>\n\n<div class=\"brush: scala\">\n <div class=\"source\">\n  <pre><span></span><span class=\"k\">type</span> <span class=\"kt\">Binary</span> <span class=\"o\">=</span> <span class=\"nc\">Array</span><span class=\"o\">[</span><span class=\"kt\">Byte</span><span class=\"o\">]</span>\n<span class=\"k\">def</span> <span class=\"n\">xor</span><span class=\"o\">(</span><span class=\"n\">xs</span><span class=\"k\">:</span> <span class=\"kt\">Binary</span><span class=\"o\">,</span> <span class=\"n\">ys</span><span class=\"k\">:</span> <span class=\"kt\">Binary</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">Binary</span> <span class=\"o\">=</span>\n    <span class=\"k\">for</span> <span class=\"o\">{</span>\n      <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"k\">&lt;-</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"n\">zip</span> <span class=\"n\">ys</span><span class=\"o\">)</span>\n    <span class=\"o\">}</span> <span class=\"k\">yield</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">^</span> <span class=\"n\">b</span><span class=\"o\">).</span><span class=\"n\">toByte</span>\n</pre></div>\n\n</div>\n\n<p>Let&rsquo;s break up the above function.</p>\n\n<p>The first line just says <em>&ldquo;Instead of me writing <code>Array[Byte]</code> all the time, from now on I will refer to it as <code>Binary</code>&rdquo;</em>. This way the function is more readable and shorter. In other words, <code>Binary</code> is an <em>alias</em> for <code>Array[Byte]</code>.</p>\n\n<p>Then we define the function <code>xor</code>, which receives two binary numbers (of type <code>Binary</code>) and outputs a third one, as should a <em>xor</em> function do. Internally, it zips the two arrays, creating an array of pairs, which then takes one by one and yields the result using the <code>^</code> function defined for <code>Byte</code>.</p>\n\n<p>The <em>xor</em> function <code>^</code> is in reality a bitwise operator and because the array contains only 1&rsquo;s and 0&rsquo;s, it works as expected and produces correct results.</p>\n\n<p>Notice that the running time of the above function is linear and depends on length of the array, i.e the number of bits, as we have to pass through the whole array and <code>xor</code> the elements one by one. This is another reason I don&rsquo;t like this solution.</p>\n\n<h3 id=\"my-solution\">My Solution</h3>\n\n<p>So, after noting these two problems, I started thinking about a different solution. In order for <code>xor</code> operations to execute in almost constant time, we could have <strong>the whole binary number saved in a Short integer</strong>. In this way the operation can be done in one go. With a single <code>^</code> we can have the result of what previously we created a O(n) function for. A <code>Short</code> can be 16 bits, which means we can save the 4, 8 and 10 bit numbers we need, in a single <em>Short</em>. With this approach we kill two birds with one stone, as we also solve the problem of using too much memory. Let&rsquo;s see why.</p>\n\n<h4 id=\"memory\">Memory</h4>\n\n<p>For starters, let&rsquo;s examine the impact on the memory usage for storing a 4bit number in these two cases.</p>\n\n<p>In the case of the <code>Array[Byte]</code> we would have 4 elements, each with a size of a <code>Byte</code> meaning 4*8 = 32 bits.</p>\n\n<p>In the second case we would use a <code>Short</code> to store the 4bit number, meaning 16 bits.</p>\n\n<p>In the case of 10bit numbers, the first way yields <em>80 bits</em> and the second stays the same: 16 bits. We can thus see, that even in the worst case, the second way uses less memory.</p>\n\n<p>With some <a href=\"https://www.youtube.com/watch?v=X09oxyIeGuY\">quick maths</a>, for the worst case we get 50% less memory usage and for the best case 80% less memory usage.</p>\n\n<h5 id=\"speed\">Speed</h5>\n\n<p>For bitwise operations we should get a ~4x to 10x speedup (depending on which binary size is the mean). But not everything in the algorithm is about bitwise operations so this figure should be much much lower when executing a whole cycle of the algorithm.</p>\n\n<p>After running some benchmarks, using <a href=\"https://scalameter.github.io/\">Scalameter</a>, it turns out that the second approach gives a <strong>~2x speedup</strong>. Before seeing how this number came out to be, we should first take closer a look at some key elements of my implementation and then contrast it with how this would change for the &ldquo;array way&rdquo; of looking at binary numbers.</p>\n\n<p>For simplicity, we are going to consider the 4 bit case.The other two cases (8 and 10 bit) are almost the same, having only minor differences.</p>\n\n<h5 id=\"bit4\">Bit4</h5>\n\n<p>I decided to call the class which is going to contain the information for a 4 bit number <code>Bit4</code>. So let&rsquo;s start with a constructor.</p>\n\n<div class=\"brush: scala\">\n <div class=\"source\">\n  <pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Bit4</span><span class=\"o\">(</span><span class=\"k\">val</span> <span class=\"n\">v</span><span class=\"k\">:</span> <span class=\"kt\">Short</span><span class=\"o\">)</span>\n</pre></div>\n\n</div>\n\n<p>Then, have to implement the <code>xor</code> method:</p>\n\n<div class=\"brush: scala\">\n <div class=\"source\">\n  <pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Bit4</span><span class=\"o\">(</span><span class=\"k\">val</span> <span class=\"n\">v</span><span class=\"k\">:</span> <span class=\"kt\">Short</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n  <span class=\"k\">def</span> <span class=\"o\">|^|(</span><span class=\"n\">that</span><span class=\"k\">:</span> <span class=\"kt\">Bit4</span><span class=\"o\">)</span> <span class=\"k\">=</span>\n    <span class=\"nc\">Bit4</span><span class=\"o\">((</span><span class=\"k\">this</span><span class=\"o\">.</span><span class=\"n\">v</span> <span class=\"o\">^</span> <span class=\"n\">that</span><span class=\"o\">.</span><span class=\"n\">v</span><span class=\"o\">).</span><span class=\"n\">toShort</span><span class=\"o\">)</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n</div>\n\n<p>But this is wrong! We only want the 4 LSB of the value <code>v</code> to be accounted for in the result. By doing this we get values greater than the range a 4 bit number could have. Since numbers are represented in <code>two's complement</code> format, the range for 4 bits should be [&ndash;8 to 7]. So, how can we solve this problem?</p>\n\n<h5 id=\"bit-masks-to-the-rescue\">Bit masks to the rescue!</h5>\n\n<p>I really don&rsquo;t know if there is a better way, but here is what I did.</p>\n\n<div class=\"brush: scala\">\n <div class=\"source\">\n  <pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Bit4</span><span class=\"o\">(</span><span class=\"k\">private</span> <span class=\"k\">val</span> <span class=\"n\">v</span><span class=\"k\">:</span> <span class=\"kt\">Short</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\n  <span class=\"k\">val</span> <span class=\"n\">value</span> <span class=\"k\">=</span> <span class=\"o\">{</span>\n    <span class=\"k\">if</span> <span class=\"o\">(((</span><span class=\"n\">v</span> <span class=\"o\">&gt;&gt;</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">&amp;</span> <span class=\"mh\">0x1</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mh\">0xFFFFFFF0</span> <span class=\"o\">|</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">&amp;</span> <span class=\"mh\">0xF</span><span class=\"o\">)).</span><span class=\"n\">toShort</span>\n    <span class=\"k\">else</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">&amp;</span> <span class=\"mh\">0xF</span><span class=\"o\">).</span><span class=\"n\">toShort</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"k\">def</span> <span class=\"o\">|^|(</span><span class=\"n\">that</span><span class=\"k\">:</span> <span class=\"kt\">Bit4</span><span class=\"o\">)</span> <span class=\"k\">=</span>\n    <span class=\"nc\">Bit4</span><span class=\"o\">((</span><span class=\"k\">this</span><span class=\"o\">.</span><span class=\"n\">value</span> <span class=\"o\">^</span> <span class=\"n\">that</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"o\">).</span><span class=\"n\">toShort</span><span class=\"o\">)</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n</div>\n\n<p>What the above code does is check whether we need to do a sign extension with ones, i.e checks if the MSB is one. If it is, we mask the 4 LSB and sign extend the rest. If it is not, we just mask the 4 LSB. This way, whatever the input value to the constructor, the <code>value</code> will always contain a number in the correct range. If the initial element was not in the correct range, then it is a problem of the caller. I have made the decision not to report anything back or throw an exception.</p>\n\n<p>The final code for <code>Bit4</code> looks something like this:</p>\n\n<div class=\"brush: scala\">\n <div class=\"source\">\n  <pre><span></span><span class=\"k\">case</span> <span class=\"k\">class</span> <span class=\"nc\">Bit8</span><span class=\"o\">(</span><span class=\"n\">v</span><span class=\"k\">:</span> <span class=\"kt\">Int</span><span class=\"o\">)</span> <span class=\"k\">extends</span> <span class=\"nc\">BinaryNum</span> <span class=\"o\">{</span>\n  <span class=\"k\">def</span> <span class=\"k\">this</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"k\">:</span> <span class=\"kt\">String</span><span class=\"o\">)</span> <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"o\">(</span><span class=\"nc\">Integer</span><span class=\"o\">.</span><span class=\"n\">parseInt</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">).</span><span class=\"n\">toShort</span><span class=\"o\">)</span>\n\n  <span class=\"k\">def</span> <span class=\"k\">this</span><span class=\"o\">(</span><span class=\"n\">ar</span><span class=\"k\">:</span> <span class=\"kt\">Array</span><span class=\"o\">[</span><span class=\"kt\">Bit</span><span class=\"o\">])</span> <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"o\">(</span><span class=\"n\">ar</span><span class=\"o\">.</span><span class=\"n\">mkString</span><span class=\"o\">)</span>\n\n  <span class=\"c1\">// consider the input as a 4bit two&#39;s complement</span>\n  <span class=\"c1\">// so do sign extension as required</span>\n  <span class=\"k\">val</span> <span class=\"n\">value</span> <span class=\"k\">=</span> <span class=\"o\">{</span>\n    <span class=\"k\">if</span> <span class=\"o\">(((</span><span class=\"n\">v</span> <span class=\"o\">&gt;&gt;</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">&amp;</span> <span class=\"mh\">0x1</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mh\">0xFFFFFFF0</span> <span class=\"o\">|</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">&amp;</span> <span class=\"mh\">0xF</span><span class=\"o\">)).</span><span class=\"n\">toShort</span>\n    <span class=\"k\">else</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">&amp;</span> <span class=\"mh\">0xF</span><span class=\"o\">).</span><span class=\"n\">toShort</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"k\">override</span> <span class=\"k\">def</span> <span class=\"n\">apply</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"k\">:</span> <span class=\"kt\">Int</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">Bit</span> <span class=\"o\">=</span> <span class=\"nc\">Bit</span><span class=\"o\">(((</span><span class=\"k\">this</span><span class=\"o\">.</span><span class=\"n\">value</span> <span class=\"o\">&gt;&gt;</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"o\">-</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">&amp;</span> <span class=\"mh\">0x1</span><span class=\"o\">).</span><span class=\"n\">toByte</span><span class=\"o\">)</span>\n\n  <span class=\"k\">def</span> <span class=\"n\">map</span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"k\">:</span> <span class=\"kt\">Short</span> <span class=\"o\">=&gt;</span> <span class=\"nc\">Short</span><span class=\"o\">)</span> <span class=\"k\">=</span> <span class=\"nc\">Bit4</span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">(</span><span class=\"k\">this</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"o\">))</span>\n\n  <span class=\"k\">def</span> <span class=\"n\">flatMap</span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"k\">:</span> <span class=\"kt\">Short</span> <span class=\"o\">=&gt;</span> <span class=\"nc\">Bit4</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">Bit4</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"k\">this</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"o\">)</span>\n\n  <span class=\"k\">def</span> <span class=\"n\">map2</span><span class=\"o\">(</span><span class=\"n\">that</span><span class=\"k\">:</span> <span class=\"kt\">Bit4</span><span class=\"o\">)(</span><span class=\"n\">f</span><span class=\"k\">:</span> <span class=\"o\">(</span><span class=\"kt\">Short</span><span class=\"o\">,</span> <span class=\"kt\">Short</span><span class=\"o\">)</span> <span class=\"k\">=&gt;</span> <span class=\"nc\">Short</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">Bit4</span> <span class=\"o\">=</span> <span class=\"k\">for</span> <span class=\"o\">{</span>\n    <span class=\"n\">a</span> <span class=\"k\">&lt;-</span> <span class=\"k\">this</span>\n    <span class=\"n\">b</span> <span class=\"k\">&lt;-</span> <span class=\"n\">that</span>\n  <span class=\"o\">}</span> <span class=\"k\">yield</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n  <span class=\"k\">def</span> <span class=\"o\">|^|(</span><span class=\"n\">that</span><span class=\"k\">:</span> <span class=\"kt\">Bit4</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">Bit4</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"n\">map2</span><span class=\"o\">(</span><span class=\"n\">that</span><span class=\"o\">)(</span><span class=\"k\">_</span> <span class=\"o\">^</span> <span class=\"k\">_</span> <span class=\"n\">toShort</span><span class=\"o\">)</span>\n\n  <span class=\"k\">def</span> <span class=\"n\">toBits</span><span class=\"k\">:</span> <span class=\"kt\">Array</span><span class=\"o\">[</span><span class=\"kt\">Bit</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"n\">to</span> <span class=\"mi\">4</span><span class=\"o\">).</span><span class=\"n\">map</span><span class=\"o\">(</span><span class=\"k\">this</span> <span class=\"o\">(</span><span class=\"k\">_</span><span class=\"o\">)).</span><span class=\"n\">toArray</span>\n\n  <span class=\"k\">def</span> <span class=\"n\">binary</span> <span class=\"k\">=</span> <span class=\"n\">intTo8BitString</span><span class=\"o\">(</span><span class=\"n\">value</span><span class=\"o\">)</span> <span class=\"n\">drop</span> <span class=\"mi\">4</span>\n\n  <span class=\"k\">def</span> <span class=\"n\">concat</span><span class=\"o\">(</span><span class=\"n\">that</span><span class=\"k\">:</span> <span class=\"kt\">Bit4</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">Bit8</span> <span class=\"o\">=</span> <span class=\"nc\">Bit8</span><span class=\"o\">(((</span><span class=\"k\">this</span><span class=\"o\">.</span><span class=\"n\">value</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">|</span> <span class=\"o\">(</span><span class=\"n\">that</span><span class=\"o\">.</span><span class=\"n\">value</span> <span class=\"o\">&amp;</span> <span class=\"mh\">0xF</span><span class=\"o\">)).</span><span class=\"n\">toByte</span><span class=\"o\">)</span>\n\n  <span class=\"k\">override</span> <span class=\"k\">def</span> <span class=\"n\">equals</span><span class=\"o\">(</span><span class=\"n\">o</span><span class=\"k\">:</span> <span class=\"kt\">scala.Any</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">Boolean</span> <span class=\"o\">=</span> <span class=\"n\">o</span> <span class=\"k\">match</span> <span class=\"o\">{</span>\n    <span class=\"k\">case</span> <span class=\"n\">x</span><span class=\"k\">:</span> <span class=\"kt\">Bit4</span> <span class=\"o\">=&gt;</span> <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"n\">value</span> <span class=\"o\">==</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">value</span>\n    <span class=\"k\">case</span> <span class=\"k\">_</span> <span class=\"k\">=&gt;</span> <span class=\"kc\">false</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n</div>\n\n<p>I have just made two auxiliary constructors for creating a Bit4 by passing a binary string (e.g Bit4(&ldquo;0010&rdquo;)) or by passing an array of bits. I also made the class a <em><strong>case class</strong></em> and added an <code>apply</code> method. Without the case class (or a companion object) you would have to write <code>new Bit4(4)</code> when creating instances. What Scala allows with case classes is to remove the need for the <code>new</code> keyword. We can simply write <code>Bit4(10)</code> and create instances throughout the code base. The way the <code>apply</code> method is implemented allows for this kind of syntax:</p>\n\n<div class=\"brush: scala\">\n <div class=\"source\">\n  <pre><span></span><span class=\"n\">scala</span><span class=\"o\">&gt;</span> <span class=\"k\">val</span> <span class=\"n\">num</span> <span class=\"k\">=</span> <span class=\"n\">sdes</span><span class=\"o\">.</span><span class=\"nc\">Bit4</span><span class=\"o\">(</span><span class=\"mi\">4</span><span class=\"o\">)</span>\n<span class=\"n\">num</span><span class=\"k\">:</span> <span class=\"kt\">sdes.Bit4</span> <span class=\"o\">=</span> <span class=\"mi\">4</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"n\">b0100</span><span class=\"o\">)</span>\n\n<span class=\"n\">scala</span><span class=\"o\">&gt;</span> <span class=\"n\">num</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">)</span>\n<span class=\"n\">res0</span><span class=\"k\">:</span> <span class=\"kt\">sdes.Bit</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n</pre></div>\n\n</div>\n\n<p>Because many times, during the execution of the algorithm we need to extract a certain bit out of the binary number, this method allows as to do so easily. For instance, if we want to get the second bit as in the above example (counting from the MSB) we just need to call <code>num(2)</code> and we will get <code>1</code> as expected. We could have easily made a method called <code>getBit(n: Int): Bit</code>, but to me, the usage of apply here makes the Bit4 class a seem more like a list of bits.</p>\n\n<p>BinaryNum is just a base trait for all the classes (Bit4, Bit8 and Bit10).</p>\n\n<p>That&rsquo;s all.</p>\n\n<h4 id=\"the-benchmark\">The benchmark</h4>\n\n<p>I wanted to see if my reasoning for choosing this method was correct and there was indeed a remarkable performance penalty when using arrays to represent binary numbers.</p>\n\n<p>In order to test the performance, I had to make some changes and the main such change was made to the |^| function (the <code>concat</code> and <code>split</code> functions also needed to be changed, but you can check them out yourself).</p>\n\n<div class=\"brush: scala\">\n <div class=\"source\">\n  <pre><span></span>  <span class=\"c1\">// ....</span>\n\n  <span class=\"k\">lazy</span> <span class=\"k\">val</span> <span class=\"n\">bvalue</span> <span class=\"k\">=</span> <span class=\"n\">toBits</span>\n\n  <span class=\"k\">def</span> <span class=\"o\">|^|(</span><span class=\"n\">that</span><span class=\"k\">:</span> <span class=\"kt\">Bit4</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">Bit4</span> <span class=\"o\">=</span>\n    <span class=\"nc\">Bit4</span><span class=\"o\">((</span><span class=\"k\">this</span><span class=\"o\">.</span><span class=\"n\">bvalue</span> <span class=\"n\">zip</span> <span class=\"n\">that</span><span class=\"o\">.</span><span class=\"n\">bvalue</span><span class=\"o\">).</span><span class=\"n\">map</span><span class=\"o\">{</span>\n      <span class=\"k\">case</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"k\">=&gt;</span>  <span class=\"nc\">Bit</span><span class=\"o\">((</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">value</span> <span class=\"o\">^</span> <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"o\">).</span><span class=\"n\">toByte</span><span class=\"o\">)</span>\n    <span class=\"o\">})</span>\n\n  <span class=\"c1\">// ...</span>\n</pre></div>\n\n</div>\n\n<p>I ran the following code using Scalameter</p>\n\n<div class=\"brush: scala\">\n <div class=\"source\">\n  <pre><span></span><span class=\"k\">import</span> <span class=\"nn\">org.scalameter.api._</span>\n\n<span class=\"k\">object</span> <span class=\"nc\">RangeBenchmark</span> <span class=\"k\">extends</span> <span class=\"nc\">Bench</span><span class=\"o\">.</span><span class=\"nc\">ForkedTime</span> <span class=\"o\">{</span>\n  <span class=\"k\">val</span> <span class=\"n\">ranges</span> <span class=\"k\">=</span> <span class=\"k\">for</span> <span class=\"o\">{</span>\n    <span class=\"n\">size</span> <span class=\"k\">&lt;-</span> <span class=\"nc\">Gen</span><span class=\"o\">.</span><span class=\"n\">range</span><span class=\"o\">(</span><span class=\"s\">\"size\"</span><span class=\"o\">)(</span><span class=\"mi\">1000</span><span class=\"o\">,</span> <span class=\"mi\">2000</span><span class=\"o\">,</span> <span class=\"mi\">100</span><span class=\"o\">)</span>\n  <span class=\"o\">}</span> <span class=\"k\">yield</span> <span class=\"mi\">0</span> <span class=\"n\">until</span> <span class=\"n\">size</span>\n\n  <span class=\"k\">val</span> <span class=\"n\">encdec</span> <span class=\"k\">=</span> <span class=\"n\">sdes</span><span class=\"o\">.</span><span class=\"nc\">SDES</span><span class=\"o\">(</span><span class=\"mi\">12</span><span class=\"o\">)</span>\n\n  <span class=\"k\">val</span> <span class=\"n\">m</span> <span class=\"k\">=</span> <span class=\"n\">measure</span> <span class=\"n\">method</span> <span class=\"s\">\"encrypt/decrypt\"</span> <span class=\"n\">in</span> <span class=\"o\">{</span>\n    <span class=\"n\">using</span><span class=\"o\">(</span><span class=\"n\">ranges</span><span class=\"o\">)</span> <span class=\"n\">in</span> <span class=\"o\">{</span>\n      <span class=\"k\">_</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"o\">(</span><span class=\"n\">el</span> <span class=\"k\">=&gt;</span> <span class=\"n\">encdec</span><span class=\"o\">.</span><span class=\"n\">decryptByte</span><span class=\"o\">(</span><span class=\"n\">encdec</span><span class=\"o\">.</span><span class=\"n\">encryptByte</span><span class=\"o\">(</span><span class=\"n\">el</span><span class=\"o\">.</span><span class=\"n\">toByte</span><span class=\"o\">)))</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n</div>\n\n<p>The results in milliseconds rounded to the nearest integer are given below:</p>\n\n<div class=\"brush: scala\">\n <div class=\"source\">\n  <pre><span></span><span class=\"c1\">// xor with array</span>\n<span class=\"k\">val</span> <span class=\"n\">xor_ar</span> <span class=\"k\">=</span> <span class=\"nc\">Array</span><span class=\"o\">(</span><span class=\"mi\">45</span><span class=\"o\">,</span> <span class=\"mi\">51</span><span class=\"o\">,</span> <span class=\"mi\">55</span><span class=\"o\">,</span> <span class=\"mi\">59</span><span class=\"o\">,</span> <span class=\"mi\">64</span><span class=\"o\">,</span> <span class=\"mi\">68</span><span class=\"o\">,</span> <span class=\"mi\">73</span><span class=\"o\">,</span> <span class=\"mi\">80</span><span class=\"o\">,</span> <span class=\"mi\">91</span><span class=\"o\">,</span> <span class=\"mi\">96</span><span class=\"o\">,</span> <span class=\"mi\">99</span><span class=\"o\">)</span>\n\n<span class=\"c1\">//xor native</span>\n<span class=\"k\">val</span> <span class=\"n\">xor_nt</span> <span class=\"k\">=</span> <span class=\"nc\">Array</span><span class=\"o\">(</span><span class=\"mi\">20</span><span class=\"o\">,</span> <span class=\"mi\">26</span><span class=\"o\">,</span> <span class=\"mi\">28</span><span class=\"o\">,</span> <span class=\"mi\">30</span><span class=\"o\">,</span> <span class=\"mi\">32</span><span class=\"o\">,</span> <span class=\"mi\">34</span><span class=\"o\">,</span> <span class=\"mi\">36</span><span class=\"o\">,</span> <span class=\"mi\">39</span><span class=\"o\">,</span> <span class=\"mi\">41</span><span class=\"o\">,</span> <span class=\"mi\">43</span><span class=\"o\">,</span> <span class=\"mi\">45</span><span class=\"o\">)</span>\n</pre></div>\n\n</div>\n\n<p>The average speedup is:</p>\n\n<div class=\"brush: scala\">\n <div class=\"source\">\n  <pre><span></span><span class=\"o\">(</span><span class=\"n\">xor_ar</span> <span class=\"n\">zip</span> <span class=\"n\">xor_nt</span><span class=\"o\">).</span><span class=\"n\">map</span><span class=\"o\">{</span> <span class=\"k\">case</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"k\">=&gt;</span> <span class=\"mf\">1.0</span><span class=\"o\">*</span><span class=\"n\">a</span><span class=\"o\">/</span><span class=\"n\">n</span> <span class=\"o\">}.</span><span class=\"n\">sum</span> <span class=\"o\">/</span> <span class=\"n\">xor_ar</span><span class=\"o\">.</span><span class=\"n\">length</span>\n</pre></div>\n\n</div>\n\n<p>which comes out as <strong>~2x.</strong></p>\n\n<hr />\n\n<p>The full source code can be found <a href=\"https://github.com/billpcs/sdes\">on my github page</a>.</p>\n\n<p><strong>Cheers!</strong></p>"))))
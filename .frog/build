((3) 0 () 2 ((p+ #"/home/bill/Desktop/billpcs.github.io/_src/posts/2017-05-20-abstraction-through-an-example.md" . unix) (p+ #"/home/bill/Desktop/billpcs.github.io/_src/posts/2016-12-16-test-blog-post.md" . unix)) () (h ! (equal) ((p+ #"/home/bill/Desktop/billpcs.github.io/_src/posts/2016-12-16-test-blog-post.md" . unix) f post (u . "The first blog post") (? . 1) 1520316431 (p+ #"/home/bill/Desktop/billpcs.github.io/2016/12/the-first-blog-post.html" . unix) (u . "/2016/12/the-first-blog-post.html") (u . "2016-12-16T17:07:17") #f (? . 0) (c (u . "ip") c (u . "scala") c (u . "python")) (u . "\n<h3 id=\"undestanding--by-doing-something-else\">Undestanding <a href=\"https://github.com/greghendershott/frog\"><strong><em>frog</em></strong></a> (by doing something else)</h3>\n\n<p>I will try to write a function to convert a bit-stream (in the form of a string) to its representation as an <a href=\"https://en.wikipedia.org/wiki/IP_address#IPv4_addresses\">IPv4</a> address.</p>\n\n<p>The catch is, the code must be as concise as possible.</p>") #t (u . "\n<h3 id=\"undestanding--by-doing-something-else\">Undestanding <a href=\"https://github.com/greghendershott/frog\"><strong><em>frog</em></strong></a> (by doing something else)</h3>\n\n<p>I will try to write a function to convert a bit-stream (in the form of a string) to its representation as an <a href=\"https://en.wikipedia.org/wiki/IP_address#IPv4_addresses\">IPv4</a> address.</p>\n\n<p>The catch is, the code must be as concise as possible.</p>\n<!-- more-->\n\n<p><strong><em>Let&rsquo;s try Scala!</em></strong></p>\n\n<p>Scala can be very concise and yet readable with some nicely written chains of operations. Let&rsquo;s see it in action here:</p>\n\n<div class=\"brush: scala\">\n <div class=\"source\">\n  <pre><span></span>  <span class=\"k\">def</span> <span class=\"n\">toIp</span><span class=\"o\">(</span><span class=\"n\">str</span><span class=\"k\">:</span> <span class=\"kt\">String</span><span class=\"o\">)</span> <span class=\"k\">=</span>\n     <span class=\"n\">str</span><span class=\"o\">.</span><span class=\"n\">grouped</span><span class=\"o\">(</span><span class=\"mi\">8</span><span class=\"o\">)</span>\n        <span class=\"o\">.</span><span class=\"n\">map</span><span class=\"o\">(</span><span class=\"n\">el</span> <span class=\"k\">=&gt;</span> <span class=\"nc\">Integer</span><span class=\"o\">.</span><span class=\"n\">parseInt</span><span class=\"o\">(</span><span class=\"n\">el</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">))</span>\n        <span class=\"o\">.</span><span class=\"n\">mkString</span><span class=\"o\">(</span><span class=\"s\">\".\"</span><span class=\"o\">)</span>   \n</pre></div>\n\n</div>\n\n<p>The <code>grouped(n)</code> method is defined for all the members of <code>scala.collection.IterableLike</code> which <code>String</code> is a member of. But let&rsquo;s not get too involved.</p>\n\n<p>What it does is given <strong>&ldquo;123456&rdquo;</strong> return an iterator with the contents grouped every <strong><em>nth</em></strong> character, i.e if n is 2 then we get <code>(\"12\", \"34\", \"56\")</code> which is perfect for this job.</p>\n\n<p>All we have to do then, is map each one to its decimal representation and be done with it.</p>\n\n<p>Now we can just say</p>\n\n<div class=\"brush: scala\">\n <div class=\"source\">\n  <pre><span></span>  <span class=\"k\">@</span> <span class=\"n\">toIp</span><span class=\"o\">(</span><span class=\"s\">\"10000000000010100000001000011110\"</span><span class=\"o\">)</span>\n  <span class=\"n\">res1</span><span class=\"k\">:</span> <span class=\"kt\">String</span> <span class=\"o\">=</span> <span class=\"s\">\"128.10.2.30\"</span>\n</pre></div>\n\n</div>\n\n<p><strong><em>Let&rsquo;s try Python!</em></strong></p>\n\n<p>The best way I could come up with, without making and import, is this</p>\n\n<div class=\"brush: python\">\n <div class=\"source\">\n  <pre><span></span>  <span class=\"k\">def</span> <span class=\"nf\">to_ip</span><span class=\"p\">(</span><span class=\"n\">bitstr</span><span class=\"p\">):</span>\n    <span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">bitstr</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">:</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">8</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">bitstr</span><span class=\"p\">),</span> <span class=\"mi\">8</span><span class=\"p\">)]</span>\n    <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">lst</span><span class=\"p\">]</span>\n    <span class=\"k\">return</span> <span class=\"s1\">&#39;.&#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">)</span>\n</pre></div>\n\n</div>\n\n<p>and then you can simply call</p>\n\n<div class=\"brush: python\">\n <div class=\"source\">\n  <pre><span></span>  <span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">to_ip</span><span class=\"p\">(</span><span class=\"s2\">\"10000000000010100000001000011110\"</span><span class=\"p\">))</span>\n  <span class=\"mf\">128.10</span><span class=\"o\">.</span><span class=\"mf\">2.30</span>\n</pre></div>\n\n</div>\n\n<p>But one would argue that python is no good without the imports. And I agree, so let&rsquo;s try the same thing, but now with the help of an import.</p>\n\n<div class=\"brush: python\">\n <div class=\"source\">\n  <pre><span></span>  <span class=\"kn\">import</span> <span class=\"nn\">re</span>\n  <span class=\"k\">def</span> <span class=\"nf\">to_ip2</span><span class=\"p\">(</span><span class=\"n\">bitstr</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"s1\">&#39;.&#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">([</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">findall</span><span class=\"p\">(</span><span class=\"s1\">&#39;........?&#39;</span><span class=\"p\">,</span> <span class=\"n\">bitstr</span><span class=\"p\">)])</span>\n</pre></div>\n\n</div>\n\n<p>so now we can call it again and get the expected results</p>\n\n<div class=\"brush: python\">\n <div class=\"source\">\n  <pre><span></span>  <span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">to_ip2</span><span class=\"p\">(</span><span class=\"s2\">\"10000000000010100000001000011110\"</span><span class=\"p\">))</span>\n  <span class=\"mf\">128.10</span><span class=\"o\">.</span><span class=\"mf\">2.30</span>\n</pre></div>\n\n</div>\n\n<p>This is quite concise but it becomes difficult to read.</p>\n\n<p>The classic readability/conciseness problem.</p>\n\n<p>I would argue that it is much clearer in Scala, without giving way to less conciseness.</p>")) ((p+ #"/home/bill/Desktop/billpcs.github.io/_src/posts/2017-05-20-abstraction-through-an-example.md" . unix) f post (u . "The Power Of Abstraction") (? . 0) 1520319925 (p+ #"/home/bill/Desktop/billpcs.github.io/2017/05/the-power-of-abstraction.html" . unix) (u . "/2017/05/the-power-of-abstraction.html") (u . "2017-05-20T21:34:27") (? . 1) #f (c (u . "theory")) (u . "\n<h3 id=\"a-simple-demonstration\">A simple demonstration</h3>\n\n<p>You are outside a restaurant. You get in and sit at a table. The waiter brings you the menu and you choose a steak. You tell the waiter about your decision and after some time (hopefully not too much) the waiter brings a steak to your table. You eat the steak and leave.</p>") #t (u . "\n<h3 id=\"a-simple-demonstration\">A simple demonstration</h3>\n\n<p>You are outside a restaurant. You get in and sit at a table. The waiter brings you the menu and you choose a steak. You tell the waiter about your decision and after some time (hopefully not too much) the waiter brings a steak to your table. You eat the steak and leave.</p>\n<!-- more-->\n\n<p><strong>To really understand what powerful a concept abstraction is, let&rsquo;s examine how your night would have changed if abstractions were non existent.</strong></p>\n\n<p>You are outside a restaurant. You get in and sit at a table. You wait for the waiter to come and bring you a menu, but after about 5 minutes you loose your patience. You get up and try to find a menu yourself. After spending a couple of minutes searching you realize there are no menus lying around. &ldquo;Anyway&rdquo;, you think, &ldquo;I already know what I want, I will have a steak&rdquo;. You look around to find the waiter and inform him about your choice. But of course, you have seen no waiter from the time you came in. It has been a long time since you last had a meal so, hungry as you are, you decide to visit the kitchen and tell them yourself about your steak. Frustrated, you storm in only in your amazement, to find no one there. You are truly puzzled by now. But you are more hungry than puzzled so you open the kitchen fridge.</p>\n\n<p>You get the idea. This can go further and further. You could open the fridge only to find it empty. Because there is no one to supply the steaks to the restaurant. You have to drive on your own to the farm, raise your own animals. Feed them on your own and find their food on your own.</p>\n\n<p>You could go as far as to say that you would have to make your own forks, your own chairs, your own fridges, your own trucks, your own stables. Because nothing is made for you. You would have to reach the bare metal to imagine an end to this chain.</p>\n\n<p><strong>Did you notice? The raw materials are there, they are not missing! It is just that there is nobody to abstract them in order to reach you.</strong></p>\n\n<h3 id=\"so-here-is-how-abstraction-works-in-this-context\">So here is how abstraction works in this context.</h3>\n\n<p>You don&rsquo;t care how the waiter will pass on your order to the kitchen. It could be by words, by a piece of paper, or by an App on his smart-phone. As long as he does it correctly you don&rsquo;t mind. The waiter on his part, does not care how the kitchen master will cook the steak. He could have his assistants do it, he could do it by himself, use that or the other recipe. The cook is only constrained by what this piece of paper says he has to prepare. When he finishes the dish, he just places it in a special place where the waiter can find it and deliver it to you. In much the same way, we can move down the chain.The cook doesn&rsquo;t care how the meat got in the kitchen, as long as it meets his standards, the driver that brought it doesn&rsquo;t care what kind of meat the box contains, or how it was made, as long as he delivers to the recipient labeled on the box. Moving further down, the meat company CEO has no interest in knowing the specifics of this meat order by the restaurant, as long as his company complies with health and quality standards and there is someone to do the distribution.</p>\n\n<p><strong>See the pattern? Nobody has to know how anyone above or below him/her works. The only trait needed is to know how to interact with them.</strong></p>\n\n<p>One could write endless pages thinking about abstractions and relations in our daily world. But let me stop here.</p>\n\n<ul>\n <li>\n  <p>The above example may seem obvious. And I will argue that it is. <strong>But only because this pyramid of duties had time to adapt throughout the human history. The challenge comes when you need to scale a system like a company, a product or a protocol with no errors and in little to no time.</strong></p></li>\n <li>\n  <p>My goal is to write some follow ups to this post analyzing some of the greatest incarnations of abstractions in technology in todays world.</p></li></ul>"))))